<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Cubernet's Blog]]></title>
  
  <link href="/blog/../atom.xml" rel="self"/>
  <link href="http://cubernet.cn/blog/"/>
  <updated>2015-07-28T13:01:35.000Z</updated>
  <id>http://cubernet.cn/blog/</id>
  
  <author>
    <name><![CDATA[Cubernet]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[无奈的一天]]></title>
    <link href="http://cubernet.cn/blog/diary-3/"/>
    <id>http://cubernet.cn/blog/diary-3/</id>
    <published>2015-07-28T13:00:26.000Z</published>
    <updated>2015-07-28T13:01:35.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>一个民族有一些仰望星空的人，他们才有希望。</p>
<p>——黑格尔</p>
</blockquote>
<a id="more"></a>
<p>老家那边的人习惯过农历生日，而生在城乡结合部的我，甚至在很长一段时间内不知道自己的公历生日。就连我的身份证上的生日也是出生那天农历的日期。</p>
<p>于是每一年里至少有三个日子我可以宣称是在过生日。首先是公历的身份证上的那个日期，这个日期其实跟我一点关系都没有，所以发来祝福的一般都是各大银行以及各大注册平台。第二个是真正的公历生日，因为习惯过农历，而别人又无从得知这个日期，所以这一天基本过得跟往常一样，甚至连我的父母都不知道这个日期。最后一个是农历生日，这个生日一般一年一次（有一年闰月，过了两次，哈哈），身边的亲人朋友会送来祝福。</p>
<p>昨天是今年里上述的第一个日子。也是第一次以工作人员的身份进入研究所。姑且认为是上天给我的生日礼物吧。</p>
<p>三点半睡觉，六点半起床，办事拖拉的我，第一天上班不能迟到。</p>
<p>至于第一天报到的流程我就不流水账记录了。大概过程就是，领取工作牌，申请计算机，找办公桌，办饭卡，发呆；最后一项占用了绝大部分时间。</p>
<p>发呆的原因有两个，一是因为这个地方几乎连地上的蚂蚁都是涉密的，所以给我的电脑除了能扫雷以外什么都不能做，并且我也没有办法徒手让它变得可用；另外一个就是身处大功率干扰设备的辐射范围内，iPhone彻底退化为iTouch。</p>
<p>太无聊的时候就要找点事情做。我首先想到的就是观察一下已经来这里工作了这么多年的前辈们在干什么。后来发现，他们当中的绝大部分人都处于一种聊天-休息-聊天-等下班的状态中，这也让我明白了为什么之前跟他们项目合作时，总是感觉他们进度缓慢。</p>
<p>然后在一个废弃的桌子上找到一本讲现代战争的书。随手翻开一章是讲以色列的。分析到以色列的作战指南时有这么一句话，“以色列军人一致认为，别人战败了十次，还是别人；而以色列如果战败一次，那这个世界上就没有以色列了。“所以他们作战勇猛，喜欢先发制人。</p>
<p>”输不起“，有时候不是一种脆弱的心态，而是你谋取胜利的最强原动力。</p>
<p>于是我准备潜心研读下这本书。下一章讲国内的情况，结果笔者笔锋一转，立刻从一个严谨的战略家变身哈巴狗。凭我这点可怜的历史基础都觉得文字里漏洞百出。</p>
<p>无奈，这个地方，这个地方里的人，这个地方里的书，都让人好无奈。</p>
<p>今天看到总理提出科研领域也要简政放权。先是一阵欣喜，觉得有盼头了。紧接着是阵阵心酸，没想到这么个简单的事情也需要总理下令才能解决。</p>
<p>这个领域确实该洗洗牌了。所谓的专家，大都是些善于‘内政外交’的政治家。有没有真正的专家，确切的说，有。但这些人目前大多还没那个”运气“评选上专家。</p>
<p>晚上回来听说生日当天好伦哥免单，兴冲冲去了。结果忘带会员卡，无功而返。</p>
<p>无奈的一天。</p>
<p>以上，今日吐槽。</p>
]]></content>
    <summary type="html">
    <![CDATA[入所第一天的无奈遭遇]]>
    
    </summary>
    
      <category term="日记" scheme="http://cubernet.cn/blog/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="生活归档" scheme="http://cubernet.cn/blog/categories/%E7%94%9F%E6%B4%BB%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[时间的故事]]></title>
    <link href="http://cubernet.cn/blog/diary-2/"/>
    <id>http://cubernet.cn/blog/diary-2/</id>
    <published>2015-07-26T08:09:31.000Z</published>
    <updated>2015-07-26T08:14:31.000Z</updated>
    <content type="html"><![CDATA[<p>天气好热，气充太多，女朋友爆了。。。爆了。。。</p>
<a id="more"></a>
<p>今天吐槽的三件事都跟时间相关，大概是人老了就开始格外珍惜时间的缘故吧。以前做什么之前先要估量下大概要花多少钱，现在却总是斤斤计较做这件事要花我多少的时间。</p>
<h2 id="新用户减免">新用户减免</h2><p>对于商家来说，现在最值钱的就是新用户，其次是普通买家，最不受待见的就是会员。所以那些一心想着办会员得优惠的帅(diao)哥(si)们啊，我只想说，海燕呐，你可长点心吧，你没看到各大平台一波又一波的新用户减免，你还在那里三百五百的充值洗剪吹？</p>
<p>国人有一大特点，准确的说是有一种能力，就是极其擅长寻找商机。好评师、差评师、刷单师、交钱才能加群看电影师、不交钱不让退群师<img src="http://cubernet.cn/assets/smilies/32.gif" id="smiley">。假想一下，如果这些丧心病狂的技能被用在科研攻坚上，估计天狮集团的传销链已经有能力发展到开普勒—452b上面了。</p>
<p>上面说了那么多，毕竟跟我没什么关系。之所以想吐槽这些，是因为这几天看到逗比洋洋一直在捣鼓一个提供新用户注册的平台。大概意思就是可以让你以几毛到几块不等的价格注册到任意平台的新用户账号，然后享受新用户减免的优惠。</p>
<p>是不是听起来很带感啊<img src="http://cubernet.cn/assets/smilies/28.gif" id="smiley">欧巴桑。我当时意淫了片刻后决定试一试。于是花几分钟了解使用流程，注册，接收验证码，绑定，下单，减免，搞定。感觉就像走了狗屎运一样。</p>
<p>不过回过头来再仔细想想，我花了十几分钟的时间减免了十几块钱，这买卖划算吗？且不说这段时间如果用来学习，学到的知识可能日后给我带来无法估量的价值，就算是以目前的收入除以时间来算，这买卖还是亏了。</p>
<p>所以这东西玩个新鲜还可以，要不就写脚本批量注册，否则还是有点捡了芝麻丢了西瓜的感觉。</p>
<h2 id="工作效率">工作效率</h2><p>工作效率是个很有意思的话题，茶余饭后总有人喜欢把这个东西比来比去。所谓工作效率的计算方法，大底都是用工作总量除以工作时间计算出来，然后谁的结果大，就说谁工作效率高。</p>
<p>我特么差点就被你们骗了。</p>
<p>高中带数学课的那个体育老师是这么教你们的？</p>
<p>假设场景是这样的。有两个人分别叫“抬头看”和“埋头干”。一天，老抬和老埋同时想到一个idea，然后准备分别动手实践。结果老埋用了一下午就搞定了，老抬用了三四天才刚搭好环境。于是大家纷纷表示，老埋效率太特么高了。</p>
<p>事后我采访了一下老埋，希望他讲几句获奖感言，老埋说，“我真是bi了狗了。”我大惑不解，“难道不是吗？你那么快就搞定了。”老埋幽幽地说了一句，“那是因为平时我天天在找bug的时候，他在造人啊！”</p>
<p>（以上情节纯属虚构，不可能有巧合）</p>
<p>其实我想说的就是，想做成一件事或是做好一件事，不能仅仅以别人眼里看到你做这件事的时间来衡量你的效率。对于智商普遍低于90的我们来说，想做成一件事，需要投入的总时间是差不多的。也就是说，那个你看起来觉得工作效率高的人，可能只是把大部分的总时间花在了你注意他之前。</p>
<p>在一件事情上投入的总时间，才是决定你最终成功与否的关键。</p>
<p>别问我上面怎么得到90这个数字的，你一吐槽就暴露了。</p>
<h2 id="微博时间轴">微博时间轴</h2><p>优秀者的社交网站是一个动态更新的奖状展；</p>
<p>而逗比的社交网站，</p>
<p>就是他为什么是逗比的最好证明。</p>
<p>我是个认识到这一真理的逗比，所以我决定，删！微！博！</p>
<p>从2011年到现在，我发表了将近3000条微博，由于认识了丁部长之后被勒令多干活少吐槽，所以微博量大减。这3000条中，相当大一部分是刚注册的那几年发表的。</p>
<p>我想把转载的和那些类似“2333哈哈哈”之类的没营养的内容都删掉，这是一项体力活，我从第一条微博开始一条一条的过滤、删除/保留。</p>
<p>删到一半我就有点受不了了。不是因为太累，而且受不了当年我为何这么傻逼。我甚至好奇当年为何有人关注我有人跟我互动有人跟我做朋友。</p>
<p>等等，等一下，互动？有人跟我互动？那不妨看下互动的内容？</p>
<p><img src="http://cubernet.cn/assets/smilies/33.gif" id="smiley">为何现在的A老总、B大神、C博士当年也如此傻逼。</p>
<p>后来我懂了。那些都是当时的我们，当时的我们的最真实的写照。可能那个年纪的人就该拥有那样的弱智。那个时候的我们不屑于现在自己身上的这些理智，就像现在的自己羞愧于承认那是当年我们的微博。</p>
<p>我不再删微博。我要努力打造更好的明天，而不是试图伪造无暇的过去。</p>
<p>谁知道呢？也许明天的我会很讨厌如今的吹毛求疵。</p>
<p>删或不删，时间轴就在那里，无法修改。</p>
<hr>
<p>以上，今日吐槽。</p>
]]></content>
    <summary type="html">
    <![CDATA[时光时光慢些吧，不要再将我变老了。]]>
    
    </summary>
    
      <category term="日记" scheme="http://cubernet.cn/blog/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="生活归档" scheme="http://cubernet.cn/blog/categories/%E7%94%9F%E6%B4%BB%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[博客转型]]></title>
    <link href="http://cubernet.cn/blog/diary-1/"/>
    <id>http://cubernet.cn/blog/diary-1/</id>
    <published>2015-07-23T16:34:47.000Z</published>
    <updated>2015-07-23T17:39:14.000Z</updated>
    <content type="html"><![CDATA[<p>技术博客转型心情日志了 =。=  </p>
<a id="more"></a>
<h2 id="转型原因">转型原因</h2><p>经历了许久的内心挣扎，终于还是接受了我不善于搞技术，也不适合做学术的残酷现实。再考虑到博客惨淡的日访问量，决定转型写心情日志了。<img src="http://cubernet.cn/assets/smilies/34.gif" id="smiley"></p>
<p>当然我还是会努力写技术博文的！！<img src="http://cubernet.cn/assets/smilies/9.gif" id="smiley"></p>
<p>言归正传。之所以这么做的原因有两个。一是现在的生活很充实，每天都会发生很多值得回味的事情，所以我想找个地方记录下来，等老了也好一篇一篇翻着回忆；二是我感觉现在过得有些浮躁，一百四十字的生活让我们少了思考多了盲从，所以把这里当成反思的地方。</p>
<p>其实最重要的一点是，平时有很多话想说，但是觉得说出来容易伤人，憋着不说容易伤己，索性写在这里，如果你们看到了，那是缘分使然，如果没看到，至少我说了个痛快。</p>
<p>由于我实在是个话痨，所以周一到周五几乎可以每天一更啦。</p>
<h2 id="大数据中心">大数据中心</h2><p>实在不好意思，<code>每日吐槽</code>系列第一个上榜的就是大数据中心。这倒也不是因为我对它有多大的怨念，我说今天吐槽的事情是按时间顺序排的，有人相信吗？<img src="http://cubernet.cn/assets/smilies/28.gif" id="smiley"></p>
<p>各大boss出巨资雇了一帮人，对外负责吹逼，对内负责扰乱正常科研秩序。成立一年没有任何大的进展，全靠吃老本。难道门口的那个宣传视频打算跟校训一样，不变了？</p>
<p><img src="http://cubernet.cn/assets/smilies/20.gif" id="smiley">其实是开玩笑啦，大数据中心全宇宙第一！</p>
<h2 id="高考报志愿">高考报志愿</h2><p>今年我没高考，但我把我当年报志愿时落下的功课都补上来了。大概是我当年高考的时候，国民的思维还都比较简单？为什么我只是大概估了下分数，然后草草填了志愿就玩蛋儿去了呢？现在的小孩报志愿真是<img src="http://cubernet.cn/assets/smilies/25.gif" id="smiley">。</p>
<p>帮今年的小孩看了那么多，跟家长聊了那么多，今天三个小孩去向全部尘埃落定，我也在这里偷偷说些我心里的真实想法吧。</p>
<ol>
<li>学校和专业固然重要，但选择的理由是孩子的爱好，不是家长的爱好，更不是以后的就业情况。再好的专业里都有挂科退学的，再差的学校里也有学霸大神。学校及专业之间的差异，和个人努力的差异比起来，在个人成长方面，影响几乎可以忽略不计。没有一个学校一个专业符合分数低、难度小、就业面广、待遇高全部这些特征。如果真有，如果我真知道，那我还在这里搬砖？</li>
<li>高考只是人生中的一个岔路口，不是风水岭。大可不必把孩子一辈子的幸福荣耀全部压在这一件事上。不读大学就不能成才了？学了师范就一定要当老师吗？现在这个年代，生下来觉得性别不喜欢都可以改变，区区高考就束缚你一生了？所以，与其用学校学历还判断一个人成功的概率，倒不如仔细想想人家背后有多努力来得实在。</li>
<li>没必要吹捧这个学校贬低那个学校的。本科阶段，充其量也就是学做人。在学校学好如何做人才是关键。就这一点而言，大学之间没什么差别，因为完全看个人。至于什么阶段才是去了学知识，额，对不起，国内大学目前尚未开启此项业务。</li>
<li>自信而不自傲，踏实而不呆板。希望你们三个都好。</li>
</ol>
<h2 id="URP面试">URP面试</h2><p>下面这些是面试完了当天写的，本来不打算发出来，今天整理草稿箱看到了，顺手附在后面吧。</p>
<hr>
<p>最近两天在教研室对申请今年URP计划的同学进行了一次简单的面试。这是我第一次正式地面试别人，整个流程下来，除了觉得累以外，还是有很多的想法，这里简单总结记录几点我感触比较深的。</p>
<h3 id="简历">简历</h3><p>在刚接到面试任务时，我建了一个表，列出几项我关心的内容，方便之后的记录。将所有的简历浏览一遍之后，可以说我当时的心情是失落的，因为我没有看到任何亮点。作为参加技术面的简历，我仅需要看到一页纸，注明你的项目经历和技术特长。我并不关心你是狮子座还是处女座，也不在乎你是否拿到C1驾照，更不想知道你最难忘的一次经历。仅有的两篇我认为比较有料的简历都是依靠着3页内容的基数。虽然面试官不需要知道你的星座，但你却要提防面试官的性格。作为处女座的我，简历里错误的缩进、中英文标点的乱用、字体的乱用等小的细节都会给你减掉很多分。</p>
<h3 id="态度">态度</h3><p>到了面试的环节，临场应变能力、自己的态度情绪控制能力可能是影响你这次面试成功与否最重要的因素之一。每个进来面试的同学，通常都会请他们首先做个自我介绍。今天遇到一位，在我们说完请他自我介绍一下的时候，这位同学的回答是，“简历上不是都写了吗？还需要再说一遍？”</p>
<p>“你可以回去了，你已经完美回答了我所有的问题。”</p>
<h3 id="实话">实话</h3><p>已经通过的同学，说句实话，你们基本都是矮子里面拔旗杆后留下来的。</p>
<p>所以，别打感情牌，说你多爱技术，说你动手能力多强。</p>
<p>整点东西出来让我瞧得起你们。</p>
<h2 id="例会">例会</h2><p>妈蛋这个话题本来是最想说的，结果还是觉得太敏感。</p>
<p>不说为妙。还不如多做几个项目。</p>
<p>据说不会让我们白做的。</p>
<hr>
<p>以上，今日吐槽。</p>
]]></content>
    <summary type="html">
    <![CDATA[技术博客转型心情日志了=。=]]>
    
    </summary>
    
      <category term="日记" scheme="http://cubernet.cn/blog/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="生活归档" scheme="http://cubernet.cn/blog/categories/%E7%94%9F%E6%B4%BB%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[说点真话——写给韬哥]]></title>
    <link href="http://cubernet.cn/blog/richardbio/"/>
    <id>http://cubernet.cn/blog/richardbio/</id>
    <published>2015-07-13T19:09:06.000Z</published>
    <updated>2015-07-13T20:10:37.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>所有的这些文字，无关乎未来，全是回忆。<br>——高334班 刘小垒</p>
</blockquote>
<a id="more"></a>
<p>回忆这个东西很神奇。许久不提就会忘记，但又不是真的忘记，其实只是暂时性退出大脑的“内存”，在大脑的“硬盘”里其实还是存在的。而且一旦被触发，大脑就会在短期内频繁的调度这些记忆，表现为回忆越想越多越清晰越像刚发生一样。</p>
<p>有关韬哥的故事，就是最好的例子。</p>
<p>从得知韬哥去世到现在已经过去十几个小时了。我说不清现在是一种怎样的状态或是一种怎样的心情。这种悲伤没有两个月前姥爷去世时那么强烈，但却更加持久。我明显感觉到这其中不仅仅是难过，还夹杂着对事实的不接受以及对天妒英才的愤怒。</p>
<p>本来我已经强迫自己按时睡下。可惜睡不着。</p>
<p>翻来覆去一阵之后，还是爬起来，开始一篇一篇读韬哥的博客。</p>
<p>回忆这东西，向来都是两个人做时是甜的，一个人做时是苦的。</p>
<p>从04年一直读到15年，我这个始终不屑于用眼泪发泄情感的怪兽终究还是在电脑前哭的泪眼模糊。这些本应该几十年后韬哥我们一起边吃边聊然后开怀大笑的回忆，为何现在只剩下我们通过这点滴文字去独自品味。</p>
<p>我接受不了这样的现实。</p>
<p>一直很崇拜韬哥，却也从未读懂韬哥。如今我一字一句的读着那些文字，感受着一个人从年少轻狂到看尽世态炎凉。博客更新的频率从周更变成月更再到年更，最后以一篇《写给自己》的文章落幕，455篇，他青春里所有的回忆；我回忆里所有的青春。</p>
<p>努力地，努力地学他低调幽默的谈吐，学他睿智成熟的思维，那是我见过最酷的男人。用右手手掌擦黑板划出的弧度，打铃瞬间伴随冷笑话收场转身的瞬间，窗边抽烟凝望的背影，偶遇时右嘴角略微上扬的微笑。</p>
<p>他心痛张国荣的离去，所以我也不喜欢过愚人节。</p>
<p>还有很多边读边写的文字，反反复复修改了几遍还是统统删了。我写的文字配不上现在的心境。</p>
<p>于是点开“安若”的聊天窗口。</p>
<p>“你会为韬哥写一些文字，对不对？”</p>
<p>“嗯。”</p>
<p>“写好了记得链接发我。”</p>
<p>我相信她的笔头。四年前她给我看的写给韬哥的那些话，是我见过的最美的文字。</p>
<p>一直都知道韬哥近几年身体不好，一直想着去看望他，却也一直没去。</p>
<p>最近一次的聊天是在去年的教师节。</p>
<p>“您最近过的还好吗？”</p>
<p>“老样子，不好不坏。”</p>
<p>果然像电视里说的那样，道别，要提前做好准备。</p>
<p>而我，没准备好。</p>
<p>所以我真的好难过。</p>
<p>我决定，以后每次给新生上的第一节课上，都要讲您那段《写在最后的话》。</p>
<p>不知道，这算不算是一种怀念。</p>
<p>如果那个众筹的事情最后没有落实，</p>
<p>那我就一个人坚持匿名做下去，</p>
<p>我保证。（好吧，这三行无关乎回忆;还有我以后真的不熬夜了。）</p>
]]></content>
    <summary type="html">
    <![CDATA[悼念韬哥]]>
    
    </summary>
    
      <category term="Life" scheme="http://cubernet.cn/blog/tags/Life/"/>
    
      <category term="生活归档" scheme="http://cubernet.cn/blog/categories/%E7%94%9F%E6%B4%BB%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[生活的意义]]></title>
    <link href="http://cubernet.cn/blog/lifemeaning/"/>
    <id>http://cubernet.cn/blog/lifemeaning/</id>
    <published>2015-05-25T16:00:00.000Z</published>
    <updated>2015-07-13T20:22:11.000Z</updated>
    <content type="html"><![CDATA[<p>友情提示： 前方有高能流水账，请注意安全，自觉躲避，慎入，慎入。</p>
<a id="more"></a>
<p>很多人跟我说过，《士兵突击》是一部蕴藏着许多人生哲理的电视剧，所以我把它看了三遍，而且每次看的时候都会很认(zhuang)真(bi)地思考许三多说的一句话，“人活着就是要做许多有意义的事，而有意义的事就是好好的活着”。然而我发现，这并没什么卵用。</p>
<p>直到有一天，当时间定格在凌晨一点，而屏幕上光标的位置依旧定格在两个小时前的时候，我的脑子里突然闪出这么一个念想：我要给寝室的家具换个布局。于是整个人立刻从呆坐了一天的状态切换到在一个十平见方的屋内移桌移柜移床的状态。凌晨三点，我重新躺在“新”寝室的床上时，心里一直思考的问题竟然是，生活的意义是什么。</p>
<p>虽然之前对许三多名言思考的结果是这句话没什么用，但我也在不知不觉中陷入这样一种无厘头的逻辑中进而觉得这两句话相互佐证我竟无言以对。So，我冒着动静太大被楼下毒死的危险、冒着熬夜猝死的危险、冒着浪费发论文时间无法毕业的危险，大半夜去把几个木头疙瘩挪来挪去，这样的生活有意义吗？</p>
<p>Maybe, but, who knows?</p>
<p>最近重新恢复了微信公众账号的更新，也开始试图为自己的博客做些推广。可能是我自己的期待比较低，所以当博客在短期内达到周访问量突破2000时，我还是很惊喜的。当然，这期间也在网上结识了很多志同道合的朋友，我看着他们的朋友圈，刷着他们的微博，读着他们的文章，体验着没有自拍、没有自拍和没有鸡汤的网络环境，不，确切的说，是享受着。在他们的言行和文字中到处弥漫着新颖而有趣的想法，这也是我为什么很欣(ji)赏(du)他们。另一件让我高兴的事情是，看到很多同学直接引用了我个人网站的整套模板（我从后台的统计面板看到了部分调试信息），这也许算是对一个调css到深夜的处女座的最高赞赏。如果有更多人需要的话，我会抽时间将单独的模板代码整理出来供大家下载。那么问题来了，在这样一个工作量如此繁重的时期我竟每天花费大量时间去做这些不务正业的事情，这样的生活有意义吗？</p>
<p>Maybe, I know?</p>
<p>除了花费一大块时间打理这些文字，我还会在绝大多数时间内保持凌晨1到2点才离开教研室（那个每天中午十二点才来教研室的人不是我），这也导致了我一而再，再而三的丢车。前几天把电动车丢掉的时候，我甚至已经出离了愤怒，我竟然在替那些贼娃子思考，他们那样的生活有意义吗？最后思考的结果是，我真是闲的蛋疼才去想这些。</p>
<p>当然我还同时做着许多奇奇怪怪的事情。之所以用奇怪这个词，是因为我觉得绝大多数同龄学生狗应该都不会去做这些事，而我做的原因，有些是为了利益，有些是出于兴趣，还有些属于稀里糊涂就上道的，比如前几天29所的面试。至于最近这一天半的培训课程，我觉得应该三者都有。用英语给另外一方以西班牙语为母语的人讲授10小时的网络攻防课程，包括理论基础和网络实战。我只能说多亏了在NSTL-Web小组时的积累和平时对渗透测试的关注，尽管有很多地方没有做到最好，但通过这段时间的准备，换一次独特的经历加一句“Good Work!”，我觉得也够了。当然，付出的代价是论文进度的严重拖慢和学位课的近乎裸考，这样的生活有意义吗？</p>
<p>I know.</p>
<p>就像那些看似加“偏”的技能点一样，虽然我暂时看不到它们的影响，但总有一天会在关键时刻发挥巨大作用。毕竟，所有的经历都是恩惠。</p>
<p>或许，这就是有意义的生活。</p>
<p>至少，这就是我生活的意义。</p>
]]></content>
    <summary type="html">
    <![CDATA[算是反思，算是总结]]>
    
    </summary>
    
      <category term="Life" scheme="http://cubernet.cn/blog/tags/Life/"/>
    
      <category term="生活归档" scheme="http://cubernet.cn/blog/categories/%E7%94%9F%E6%B4%BB%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最优化方法(3)——最速下降法和牛顿法]]></title>
    <link href="http://cubernet.cn/blog/optimization-3/"/>
    <id>http://cubernet.cn/blog/optimization-3/</id>
    <published>2015-05-11T15:09:17.000Z</published>
    <updated>2015-05-12T04:44:12.000Z</updated>
    <content type="html"><![CDATA[<p>最速下降法是求解无约束优化问题最简单和最古老的方法之一，虽然时至今日它不再具有实用性，但它确实研究其他无约束优化算法的基础。此外，牛顿法也是一种经典的无约束优化算法。</p>
<a id="more"></a>
<h2 id="最速下降方法">最速下降方法</h2><p>在解决无约束优化问题下降类算法时，用不同的方式确定步长和搜索方向，就会得到不同的算法。最速下降法使用<code>负梯度</code>方向作为搜索方向，因此最速下降法又称“梯度法”。虽然单独就这个算法来看，早已不再实用，但许多有效算法都是以它为基础通过改进或修正而得到。</p>
<p><strong>结论：</strong>沿负梯度方向$d=-g_k$，函数值下降最快</p>
<p><strong>证明：</strong>设$f(x)$在$x_k$附近连续可微，$d_k$为搜索方向向量，$g_k=\nabla f(x_k)$。</p>
<p>由泰勒展开式得，</p>
<p>$f(x_k+\alpha d_k) = f(x_k) + \alpha g_k^T d_k + o(\alpha),\alpha &gt; 0$</p>
<p>那么目标函数$f(x)$在$x_k$处沿方向$d_k$下降的变化率为</p>
<p>$\lim_{\alpha \rightarrow 0}\frac{f(x_k+\alpha d_k)-f(x_k)}{\alpha}=\lim_{\alpha \rightarrow 0}\frac{\alpha g_k^T d_k + o(\alpha)}{\alpha}=g_k^T d_k = \left| g_k \right|\left| d_k \right|\cos\vec{\theta_k}$</p>
<p>其中$\vec{\theta_k}$为$g_k$和$d_k$的夹角。要事变化率最小，只有$\cos\vec{\theta_k}=-1$，即当$\vec{\theta_k}=\pi$时才能达到，也即$d_k$应该取负梯度方向。</p>
<h2 id="牛顿法">牛顿法</h2><p>牛顿法的基本思想是用迭代点$x_k$处的一阶导数和二阶导数对目标函数进行二次函数近似，然后把二次模型的极小点作为新的迭代点，并不断重复这一过程，直至求得满足精度的近似极小点。</p>
<p>牛顿法的迭代公式为：$x_{k+1}=x_k-G_k^{-1}g_k$</p>
<p>在迭代公式中，每步迭代都需要求矩阵的逆，在实际计算中，可通过先解</p>
<p>$ G_{k}d = -g_{k}$</p>
<p>得$d_k$，然后令$x_{k+1} = x_k + d_k$来避免求逆。</p>
<p>这里借用维基百科的示意图展示下效果：</p>
<p><img src="http://upload.wikimedia.org/wikipedia/commons/e/e0/NewtonIteration_Ani.gif" alt="蓝线表示方程f而红线表示切线. 可以看出$x_{n+1}$比$x_n$更靠近f所要求的根x."></p>
<p><strong>定理：</strong>设函数$f(x)$有二阶连续偏导数，在局部极小点$x^*$处，$G(x^*)=\nabla ^2 f(x^*)$是正定的并且$G(x)$在$x^*$的一个领域内是连续的。如果初始点$x_0$充分靠近$x^*$，那么对一切k，牛顿迭代公式是使用的，当${x_k}$为无穷点列时，其极限为$x^*$且收敛阶至少是二阶的。</p>
<h2 id="修正牛顿法">修正牛顿法</h2><p>牛顿法具有不低于二阶的收敛速度，这是它的优点。但该算法要求目标函数的$G(x)=\nabla ^2f(x)$在每个迭代点$x_k$处是正定的。为了克服这一缺陷，可以将牛顿法和最速下降法结合起来。基本思想是：当$\nabla ^2f(x)$正定时，采用牛顿法；否则，若$\nabla ^2f(x)$奇异，或者虽然非奇异，但牛顿方向不是下降方向，则采用负梯度方向作为搜索方向。</p>
]]></content>
    <summary type="html">
    <![CDATA[最优化方法之最速下降法和牛顿法]]>
    
    </summary>
    
      <category term="最优化方法" scheme="http://cubernet.cn/blog/tags/%E6%9C%80%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    
      <category term="学术归档" scheme="http://cubernet.cn/blog/categories/%E5%AD%A6%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
      <category term="最优化方法" scheme="http://cubernet.cn/blog/categories/%E5%AD%A6%E6%9C%AF%E5%BD%92%E6%A1%A3/%E6%9C%80%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift基础(一)]]></title>
    <link href="http://cubernet.cn/blog/swift-1/"/>
    <id>http://cubernet.cn/blog/swift-1/</id>
    <published>2015-05-04T14:34:15.000Z</published>
    <updated>2015-05-05T16:33:06.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Swift is an innovative new programming language for Cocoa and Cocoa Touch. Writing code is interactive and fun, the syntax is concise yet expressive, and apps run lightning-fast. Swift is ready for your next iOS and OS X project — or for addition into your current app — because Swift code works side-by-side with Objective-C.</p>
<p>—— developer.apple.com</p>
</blockquote>
<a id="more"></a>
<h2 id="简单值(Simple_Values)">简单值(Simple Values)</h2><p>在Swift中包含常量和变量两种类型的值。用let声明常量，用var声明变量。常量一旦赋值变不可改变。声明变量时，既可以显式的声明变量类型，也可以让编译器自己推断类型。</p>
<pre><code>var <span class="variable">myVariable =</span> <span class="number">42</span>
<span class="variable">myVariable =</span> <span class="number">50</span>
<span class="keyword">let</span> <span class="variable">myConstant =</span> <span class="number">42</span>
<span class="keyword">let</span> <span class="variable">implicaitInteger =</span> <span class="number">70</span>
<span class="keyword">let</span> explicitDouble: <span class="variable">Double =</span> <span class="number">70</span>
</code></pre><p>使用方括号<code>[]</code>来创建数组和字典，并使用下表或者键来访问元素。同理，初始化数组或字典时，如果可以推断出数据类型，则无需显式声明类型。</p>
<pre><code>var shoppingList = ["catfish","water","tulips","blue paint"]
let emptyDictionary = [<span class="link_label">String: Float</span>](<span class="link_url"></span>)
occupations = [:]
</code></pre><h2 id="控制流(Control_Flow)">控制流(Control Flow)</h2><p>常用的控制流有<code>if</code>、<code>switch</code>、<code>for-in</code>、<code>while</code>、<code>do-while</code>等。</p>
<p>其中，if语句的条件必须是一个布尔表达式；同时我们也可以通过一起使用if和let来处理值缺失的情况。有些变量的值是可选得，一个可选的值可能是一个具体的值或者是<code>nil</code>，表示值缺失。在类型后面加一个问号来标记这个变量的值是可选的。</p>
<pre><code><span class="keyword">var</span> optionalName: <span class="built_in">String</span>? = <span class="string">"John Appleseed"</span>
<span class="keyword">var</span> greeting = <span class="string">"Hello"</span>
<span class="keyword">if</span> <span class="keyword">let</span> name = optionalName {
    greeting = <span class="string">"hello,\(name)"</span>
}
</code></pre><p>如果变量的可选值是nil，条件会判断为false，大括号中的代码不会执行，如果不是nil，那么会将值赋给let后面的常量，这样代码块中就可以使用这个值了。</p>
<p>在<code>switch</code>语句中，当某一个case匹配时，程序会自动退出switch语句，所以无需在每个case结尾都写break了。</p>
<p>在循环中可以使用<code>..&lt;</code>来表示范围：</p>
<pre><code><span class="keyword">var</span> firstForLoop = <span class="number">0</span>
<span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">4</span> <span class="comment">{
    firstForLoop += i
}</span>
</code></pre><p>其他的控制语句与常用方法类似。</p>
<h2 id="函数和闭包(Functions_and_Closures)">函数和闭包(Functions and Closures)</h2><p>在Swift中，使用func来声明一个函数。</p>
<ul>
<li>使用<code>-&gt;</code>来指定函数的返回值，一个函数可以有多个返回值，多个返回值需要放在一个元组中</li>
<li>函数可以带有可变个数的参数，这些参数在函数内表现为数组的形式</li>
<li>函数可以被嵌套</li>
<li><p>函数可以作为另一个函数的返回值</p>
<pre><code><span class="func"><span class="keyword">func</span> <span class="title">makeIncrementer</span><span class="params">()</span></span>-&gt;(<span class="type">Int</span>-&gt;<span class="type">Int</span>){
    <span class="func"><span class="keyword">func</span> <span class="title">addOne</span><span class="params">(number:Int)</span></span>-&gt;<span class="type">Int</span>{
        <span class="keyword">return</span> <span class="number">1</span> + number
    }
    <span class="keyword">return</span> addOne
}
<span class="keyword">var</span> increment = makeIncrementer()
increment(<span class="number">7</span>)
</code></pre></li>
<li><p>函数也可以当做参数传入另一个函数</p>
<pre><code><span class="func"><span class="keyword">func</span> <span class="title">hasAnyMatches</span><span class="params">(list:[Int],ocndition:Int-&gt;Bool)</span></span>-&gt;<span class="type">Bool</span>{
    <span class="keyword">for</span> item <span class="keyword">in</span> list {
        <span class="keyword">if</span> condition(item){
            <span class="keyword">return</span> <span class="built_in">true</span>
        }
    }
    <span class="keyword">return</span> <span class="built_in">false</span>
}
<span class="func"><span class="keyword">func</span> <span class="title">lessThanTen</span><span class="params">(number:Int)</span></span>-&gt;<span class="type">Bool</span>{
    <span class="keyword">return</span> number &lt; <span class="number">10</span>
}
<span class="keyword">var</span> numbers = [<span class="number">20</span>,<span class="number">19</span>,<span class="number">7</span>,<span class="number">12</span>]
hasAnyMatches(numbers,lessThanTen)
</code></pre></li>
</ul>
<p>函数实际上是一种特殊的闭包，我们可以使用<code>{}</code>来创建一个匿名闭包。使用in将参数和返回值类型声明与闭包函数体进行分离。如果一个闭包的类型已知，可以忽略参数的类型和返回值。我们可以通过参数位置而不是参数名字来引用参数。</p>
<p>下面的两段代码是等价的：</p>
<pre><code>numbers.map({
    (number:<span class="type">Int</span>)-&gt;<span class="type">Int</span> <span class="keyword">in</span>
    <span class="keyword">let</span> <span class="literal">result</span> = <span class="number">3</span> * number
    <span class="keyword">return</span> <span class="literal">result</span>
})

numbers.map({ number <span class="keyword">in</span> <span class="number">3</span> * number })
</code></pre><h2 id="对象和类(Objects_and_Classes)">对象和类(Objects and Classes)</h2><p>使用<code>class</code>和类名来创建一个类。要创建一个类的实例，在类名后面加上括号。使用<code>.</code>来访问实例的属性和方法。</p>
<p>通过在类名后面加上父类的名字定义子类，用冒号分割。子类如果要重写父类的方法，需要用<code>override</code>标记。</p>
<pre><code><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">simpleDescription</span><span class="params">()</span></span>-&gt;<span class="type">String</span>}
    ...
}
</code></pre><p>属性可以有getter和setter方法。也可以通过使用willSet和didSet来实现在设置一个新值之前或者之后运行代码。</p>
<h2 id="枚举和结构体(Enumerations_and_Structures)">枚举和结构体(Enumerations and Structures)</h2><p>使用<code>enum</code>来创建一个枚举。枚举可以包含方法。</p>
<p>使用<code>struct</code>来创建一个结构体。结构体和类之间最大的区别就是结构体是传值，类是传引用。</p>
<h2 id="协议和扩展(Protocols_and_Extensions)">协议和扩展(Protocols and Extensions)</h2><p>使用<code>protocol</code>来声明一个协议。类、枚举和结构体都可以实现协议。</p>
<pre><code><span class="class"><span class="keyword">protocol</span> <span class="title">ExampleProtocol</span></span>{
    <span class="keyword">var</span> simpleDescription: <span class="type">String</span>{ <span class="keyword">get</span> }
    <span class="keyword">mutating</span> <span class="func"><span class="keyword">func</span> <span class="title">adjust</span><span class="params">()</span></span>
}
</code></pre><h2 id="泛型(Generics)">泛型(Generics)</h2><p>在尖括号里写一个名字来创建一个泛型函数。</p>
<pre><code>func repeat&lt;<span class="type">ItemType</span>&gt;(item: <span class="type">ItemType</span>, times: <span class="type">Int</span>) -&gt; [<span class="type">ItemType</span>] {
    <span class="keyword">var</span> <span class="literal">result</span> = [<span class="type">ItemType</span>]()
    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;times {
        <span class="literal">result</span>.append(item)
    }
    <span class="keyword">return</span> <span class="literal">result</span>
}
repeat(<span class="string">"knock"</span>,<span class="number">4</span>)
</code></pre><blockquote>
<p><a href="http://numbbbbb.gitbooks.io/-the-swift-programming-language-/content/" target="_blank" rel="external">《The Swift Programming Language》</a>阅读总结</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[《The Swift Programming Language》阅读总结]]>
    
    </summary>
    
      <category term="Swift" scheme="http://cubernet.cn/blog/tags/Swift/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
      <category term="Swift基础" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/Swift%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[感悟]]></title>
    <link href="http://cubernet.cn/blog/ganwu/"/>
    <id>http://cubernet.cn/blog/ganwu/</id>
    <published>2015-05-03T12:10:16.000Z</published>
    <updated>2015-05-04T15:27:23.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>谁都赢不了时间，</p>
<p>总有些转身就是永别。</p>
<p>——Cubernet</p>
</blockquote>
<a id="more"></a>
<p>整理了下最近的时间线，剔除其他的事情，大概是这样的：</p>
<table>
<thead>
<tr>
<th>Time</th>
<th style="text-align:center">Events</th>
</tr>
</thead>
<tbody>
<tr>
<td>2015.04.10</td>
<td style="text-align:center">姥爷感觉自己感冒了</td>
</tr>
<tr>
<td>2015.04.13</td>
<td style="text-align:center">感冒没有好转，去医院检查</td>
</tr>
<tr>
<td>2015.04.15</td>
<td style="text-align:center">住院，当天我得知姥爷住院</td>
</tr>
<tr>
<td>2015.04.17</td>
<td style="text-align:center">确诊癌症晚期，医生估计剩余时间为3-6个月</td>
</tr>
<tr>
<td>2015.04.27</td>
<td style="text-align:center">我坐飞机从成都直飞大同，当天医生建议出院</td>
</tr>
<tr>
<td>2015.04.28</td>
<td style="text-align:center">去医院看望姥爷，陪同姥爷出院</td>
</tr>
<tr>
<td>2015.04.29</td>
<td style="text-align:center">亲朋开始陆续到家里看望姥爷</td>
</tr>
<tr>
<td>2015.04.30</td>
<td style="text-align:center">早晨7点43分，姥爷去世</td>
</tr>
</tbody>
</table>
<p>从来没有想过，仅仅过了18天，生活就发生了巨变。</p>
<p>其实，我是后悔的。</p>
<p>我后悔寒假回来为什么没多陪陪姥爷。</p>
<p>我后悔知道姥爷住院为什么没早点请假回来。</p>
<p>我后悔29号为什么睡了懒觉才去看望姥爷。</p>
<p>我后悔29号晚上走的时候为什么没多看姥爷一眼。</p>
<p>但是，这个世界从来都没有重新选择的机会。</p>
<p>人走了，再多的泪水，再多的悔恨，都是徒劳。</p>
<hr>
<p>第一次直面亲人去世，我摸着那只渐渐由热转凉的手，哭着回想着小时候姥爷陪我的日子，我总觉得，姥爷只是睡着了，他并没有走。</p>
<p>我心疼姥爷，在本该享受晚年生活的时候匆匆离去；我心疼姥姥，我无法想象两个人一辈子走来，突然少了一个作伴，接下来的日子如何继续；我心疼妈妈，我的妈妈，以后再也没有爸爸了。</p>
<hr>
<p>突然醒悟，孝顺，不能等。</p>
<p>就像我们永远不知道下一颗巧克力的味道，我们也不知道下一秒将会发生什么。如果把孝顺全部推脱在<code>等我有钱了</code>、<code>等我安稳了</code>等等明天的明天的话，等那一天真的到来的时候，也许那个机会早已不在，得到的只是更多的悔恨。</p>
<p>要爱，趁现在。</p>
<hr>
<p>愿姥爷走好，</p>
<p>更愿活着的人，</p>
<p>活的越来越好。</p>
]]></content>
    <summary type="html">
    <![CDATA[由姥爷去世所想]]>
    
    </summary>
    
      <category term="life" scheme="http://cubernet.cn/blog/tags/life/"/>
    
      <category term="生活归档" scheme="http://cubernet.cn/blog/categories/%E7%94%9F%E6%B4%BB%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最优化方法(2)——线搜索技术]]></title>
    <link href="http://cubernet.cn/blog/optimization-2/"/>
    <id>http://cubernet.cn/blog/optimization-2/</id>
    <published>2015-04-24T16:39:16.000Z</published>
    <updated>2015-05-03T19:29:33.000Z</updated>
    <content type="html"><![CDATA[<p>在无约束优化问题的迭代算法中通常有如下迭代步骤：</p>
<blockquote>
<p>   通过某种搜索方式确定步长因子$\alpha{_k}$，使得$f(x{_k}+\alpha{_k}d{_k})&lt;f(x{_k})$</p>
</blockquote>
<p>这实际上是（n个变量的）目标函数f(x)在一个规定的方向上移动所形成的单变量优化问题，也就是所谓的“线搜索”或“一维搜索”技术。</p>
<a id="more"></a>
<p>线搜索有精确搜索和非精确搜索之分。所谓精确线搜索，是指求$\alpha{_k}$，使得目标函数f沿方向$d{_k}$达到极小。所谓非精确线搜索，是指选取$\alpha{-k}$，使得目标函数f得到可接受的下降量。</p>
<h2 id="精确线搜索">精确线搜索</h2><p>精确线搜索的基本思想是：首先确定包含问题最优解的搜索区间，然后采用某种插值或分割技术缩小这个区间，进行搜索求解。精确线搜索分为两类，一类是使用导数的搜索，如插值法、牛顿法及抛物线法等；另一类是不用导数的搜索，如0.618法、分数法及成功-失败法等。</p>
<h3 id="进退法">进退法</h3><p>进退法适用于确定搜索区间，并保证具有近似单峰性质的数值算法，其基本思想是从一点出发，按一定步长，试图确定函数值呈现“高-低-高”的三点，从而得到一个近似的单峰区间。</p>
<h3 id="黄金分割法">黄金分割法</h3><p>黄金分割法也称为0.618法，其基本思想是通过试探点函数值的比较，使得包含极小点的搜索区间不断缩小。该方法仅需要计算函数值，使用范围广。</p>
<p>由于每次迭代搜索区间的收缩率是t=0.618，故0.618法只是线性收敛的，即这一方法的计算效率并不高，但该方法每次迭代只需要计算一次函数值的优点弥补了这一缺憾。</p>
<blockquote>
<p>0.618法求单变量函数 $ \phi $ 在单峰区间上[a,b]的近似极小点的代码</p>
</blockquote>
<pre><code>function [s,phis,k,G,E] = golds(phi,a,b,delta,epsilon)
%输入：phi是目标函数，a，b是搜索区间的两个端点
%        delta，epsilon分别是自变量和函数值的容许误差
%输出：s，phis分别是近似极小点和极小值，G是nx4矩阵，
%        其第k行分别是a,p,q,b的第k次迭代值[ak,pk,qk,bk],
%        <span class="variable">E=</span>[ds,dphi],分别是s和phis的误差限。
<span class="variable">t=</span>(sqrt(<span class="number">5</span>)-<span class="number">1</span>)/<span class="number">2</span>; <span class="variable">h=</span>b-a;
<span class="variable">phia=</span>feval(phi,a); <span class="variable">phib=</span>feval(phi,b);
<span class="variable">p=</span>a+(<span class="number">1</span>-t)*h; <span class="variable">q=</span>a+t*h;
<span class="variable">phip=</span>feval(phi,p); <span class="variable">phiq=</span>feval(phi,q);
<span class="variable">k=</span><span class="number">1</span>;    G(k,:)=[a,p,q,b];
while(abs(phib-phia)&gt;epsilon)|(h&gt;delta)
    <span class="keyword">if</span>(phip&lt;phiq)
        <span class="variable">b=</span>q; <span class="variable">phib=</span>phiq; <span class="variable">q=</span>p; <span class="variable">phiq=</span>phip;
        <span class="variable">h=</span>b-a; <span class="variable">p=</span>a+(<span class="number">1</span>-t)*h; <span class="variable">phip=</span>feval(phi,p);
    <span class="keyword">else</span>
        <span class="variable">a=</span>p; <span class="variable">phia=</span>phip; <span class="variable">p=</span>q; <span class="variable">phip=</span>phiq;
        <span class="variable">h=</span>b-a; <span class="variable">q=</span>a+t*h; <span class="variable">phiq=</span>feval(phi,q);
    end
    <span class="variable">k=</span>k+<span class="number">1</span>; G(k,:)=[a,p,q,b];
end
<span class="variable">ds=</span>abs(b-a); <span class="variable">dphi=</span>abs(phib-phia);
<span class="keyword">if</span>(phip&lt;=phiq)
    <span class="variable">s=</span>p; <span class="variable">phis=</span>phip;
<span class="keyword">else</span>
    <span class="variable">s=</span>q; <span class="variable">phis=</span>phiq;
end
<span class="variable">E=</span>[ds,dphi];
</code></pre><h3 id="抛物线法">抛物线法</h3><p>抛物线法也叫做二次插值法，其基本思想是：在搜索区间中不断地使用二次多项式去近似目标函数，并逐步用插值多项式的极小点去逼近线搜索问题的极小点。</p>
<h2 id="非精确线搜索">非精确线搜索</h2><p>线搜索技术是求解许多优化问题下降算法的基本组成部分，但精确线搜索往往需要计算很多的函数值和梯度值，从而耗费较多的计算资源。特别是当迭代点远离最优点时，精确线搜索通常不是十分有效和合理的。对于许多优化算法，其收敛速度并不依赖于精确搜索过程。因此，既能保证目标函数具有可接受的下降量，又能使最终形成的迭代序列收敛的非精确线搜索变得越来越流行。</p>
<h3 id="Wolfe准则">Wolfe准则</h3><p>Wolfe准则是指给定$\rho \in (0,0.5),\sigma \in (\rho,0.5)$，求$\alpha{_k}$使得下面两个不等式同时成立：</p>
<p>$f(x{_k}+\alpha{_k}d{_k}) \leq f(x{_k}) + \rho \alpha{_k} g{_k}^Td{_k}$ …………………………（1）</p>
<p>$\nabla f(x{_k}+\alpha{_k}d{_k})^Td{_k} \geq \sigma g{_k}^Td{_k}$ …………………………（2）</p>
<p>其中$g{_k}=g(x{_k})=\nabla f(x{_k})$.</p>
<p>如果用条件（3）代替条件（2），这样，当$\sigma&gt;0$充分小时，可保证（3）变成近似精确线搜索。（2）和（3）也称为强Wolfe准则。</p>
<p>$\mid \nabla f(x{_k}+\alpha{_k}d{_k})^Td{_k}\mid \leq -\sigma g{_k}^Td{_k}$ …………………………（3）</p>
<h3 id="Armijo准则">Armijo准则</h3><p>Armijo准则是指给定$\beta \in (0,1), \sigma \in (0,0.5)$。令步长因子$\alpha{_k}=\beta^(m{_k})$，其中$m{_k}$为满足下列不等式的最小非负整数：</p>
<p>$f(x{_k}+\beta^md{_k}) \leq f(x{_k}) + \sigma\beta^mg{_k}^Td{_k}$ …………………………（4）</p>
<p>可以证明，若$f(x)$是连续可微的且满足$g{_k}^Td{_k}&lt;0$，则Armijo准则是有限终止的，即存在正数$\sigma$,使得对于充分大的正整数m，式（4）成立。</p>
<h2 id="线搜索算法的一般框架">线搜索算法的一般框架</h2><ol>
<li>初始化.选取有关参数及初始迭代点$x{_0} \in R^n$.设定容许误差$\epsilon \ll 1$.令$k:=0$.</li>
<li>检验终止判别准则。计算$g{_k}=\nabla f(x{_k})$.若$\mid\mid g{_k}\mid\mid \leq \epsilon$，输出$x^* \approx x{_k}$，停算.</li>
<li>确定下降方向$d{_k}$，使得满足$g{_k}^Td{_k} &lt; 0$.</li>
<li>确定步长因子$\alpha{_k}$.可在“精确”与“非精确”两种线搜索技术中选用其一.</li>
<li>更新迭代点.令$x{_(k+1)}:=x{_k}+\alpha{_k}d{_k},k:=k+1$,转步骤2.</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[最优化方法之线搜索技术]]>
    
    </summary>
    
      <category term="最优化方法" scheme="http://cubernet.cn/blog/tags/%E6%9C%80%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    
      <category term="学术归档" scheme="http://cubernet.cn/blog/categories/%E5%AD%A6%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
      <category term="最优化方法" scheme="http://cubernet.cn/blog/categories/%E5%AD%A6%E6%9C%AF%E5%BD%92%E6%A1%A3/%E6%9C%80%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最优化方法(1)——最优化问题的数学模型]]></title>
    <link href="http://cubernet.cn/blog/optimization-1/"/>
    <id>http://cubernet.cn/blog/optimization-1/</id>
    <published>2015-04-23T16:39:16.000Z</published>
    <updated>2015-05-03T19:31:49.000Z</updated>
    <content type="html"><![CDATA[<p>通俗的讲，最优化问题就是求一个多元函数在某个给定集合上的极值。几乎所有类型的最优化问题都可以用下面的数学模型来描述：</p>
<p>$min\ \ f(x),\ \ \ s.t.\ \ \ x \in K$</p>
<a id="more"></a>
<p>其中，K 为某个给定的集合（称为可行集或可行域），$f(x)$为定义在集合K上的实值函数，x通常称为决策变量。</p>
<p>通常按照可行集的性质将最优化问题分为以下几类：</p>
<ol>
<li>线性规划和非线性规划：可行集是有限维空间中的一个子集。</li>
<li>组合优化或网络规划：可行集中的元素是有限的。</li>
<li>动态规划：可行集是一个依赖于时间的决策序列。</li>
<li>最优控制：可行集是无穷维空间中的一个连续子集。</li>
</ol>
<hr>
<p>参考资料： 《最优化方法及其Matlab程序设计》- 科学出版社</p>
]]></content>
    <summary type="html">
    <![CDATA[学习最优化方法的摘录笔记]]>
    
    </summary>
    
      <category term="最优化方法" scheme="http://cubernet.cn/blog/tags/%E6%9C%80%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    
      <category term="学术归档" scheme="http://cubernet.cn/blog/categories/%E5%AD%A6%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
      <category term="最优化方法" scheme="http://cubernet.cn/blog/categories/%E5%AD%A6%E6%9C%AF%E5%BD%92%E6%A1%A3/%E6%9C%80%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[你总以为人生会比这个多]]></title>
    <link href="http://cubernet.cn/blog/pray4u/"/>
    <id>http://cubernet.cn/blog/pray4u/</id>
    <published>2015-04-21T15:11:37.000Z</published>
    <updated>2015-05-04T15:17:17.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>之前很火的一个Quora上的问题——最令你吃惊的事实是什么？</p>
<p>得票最多的答案是：“人生只有900个月”。</p>
</blockquote>
<p>最近有点乱。因为发生了很多事，更因为有很多事即将发生。</p>
<a id="more"></a>
<p>春节过后到现在已两月有余了吧，上周突然接到家里的电话，说姥爷病了，还说情况可能不是很好。从那一刻起，整个人都不太好了，虽然表面上看不出什么异样。</p>
<p>都说人到了一定年纪，是害怕过生日害怕过年的。我虽然按理说还没到所指的“一定的年纪”，但也真真切切的开始有一点害怕过年。外出求学，在异地独自迎来了自己的十八岁生日，也正式开始了一年两次甚至一年一次的回家频率。每次走之前的那个晚上都要再去跟爷爷奶奶姥姥姥爷道别，每次迈出那道门时都在心里默念，您们一定要保重身体，等我明年再回来看你们；您们一定要保重身体，等我学成归来，等我娶妻生子。</p>
<p>等。老人想等，可惜时间不等。</p>
<p>八十多岁的老人往往说病就病，说倒就倒。</p>
<p>挂了电话后，我的梦境里也开始天天出现姥爷的身影。那位两个月前一顿饭还能吃两块红烧肉的老人啊。</p>
<p>悲伤的感情藏在心里，姥爷的故事日后再续。现在，我只希望老人家能跟病魔打一场持久战，能拖多久拖多久。也希望我能赶快回去，能多陪一刻是一刻。</p>
<hr>
<blockquote>
<p>位置不能带来自由，能力才能让人自由。</p>
</blockquote>
<p>我们的身边，从来都不缺少“邻居家的孩子”，当然，也从不缺少一直在抱怨“邻居”的孩子。可能是从小到大，成绩还算说得过去，所以总被问到该怎么学，该怎么做；可能还是因为成绩还算说的过去，所以偶尔会充当Team Leader的角色。不管是回答别人，还是组织团队，我向来只强调一项，那就是执行力。</p>
<p>想法再多没有用。最牛逼的人，都是说干就干的人。</p>
<p>牛逼的人其实没什么特别，其实只是在你犹豫和墨迹的时候别人在努力而已。这句话听起来像句废话，看起来像句鸡汤，但仔细想想，事实也就是这么个道理。</p>
<p>如果你真的想做成一件事情，那么请你关掉那沟通效率低的爆表的QQ，停止刷那被面膜减肥茶代购品充斥的朋友圈，摘下那不管是播放中文英文民谣爵士的耳机，合上那《提高工作效率的100个tips》的书籍，丢掉脑子里那些乱七八糟的不满和抱怨，脚踏实地的从头开始做这件事情，然后坚持做下去。</p>
<p>简单说就是，先做，然后一直做。</p>
<p>如果真的需要沟通，那么停下手上的活，打个电话，把事情说清楚然后继续。如果真的需要阅读，寻找优质博客，建立自己的 RSS列表，把有限的时间用来阅读最优质的文字，you are what you see。如果真的需要音乐，一杯咖啡或一段慢跑或许是音乐的最佳伴侣，工作时听音乐只会让两者都变得多余。</p>
<p>上面这些话多为最近科研生活中的一些感想感悟，绝非中伤他人，仅为警醒自己，如有雷同，纯属巧合。</p>
]]></content>
    <summary type="html">
    <![CDATA[人生只有900个月]]>
    
    </summary>
    
      <category term="life" scheme="http://cubernet.cn/blog/tags/life/"/>
    
      <category term="生活归档" scheme="http://cubernet.cn/blog/categories/%E7%94%9F%E6%B4%BB%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[随便说点什么]]></title>
    <link href="http://cubernet.cn/blog/newyear/"/>
    <id>http://cubernet.cn/blog/newyear/</id>
    <published>2015-02-28T15:11:37.000Z</published>
    <updated>2015-05-04T14:49:37.000Z</updated>
    <content type="html"><![CDATA[<p>很久没有写一点东西，眼睛盯着屏幕，不知道该从何说起。</p>
<p>写上一篇博文的时候是在期末之前，到现在在家里背靠着床头为止，中间这段时间经历很多细小琐碎却让我觉得十足倒霉的事情。所谓吃一堑长一智，也算是买教训了。</p>
<a id="more"></a>
<p>从上次离家到这次回来，整整一年。还没来得及开寝室门，就被松哥喊去了上海，由此掀开了这一年的NSTL生活。说不上累，但也时不时的忙，六月的毕业和九月的开学与我无关，现在回头看一看，能想到的几个点，貌似只有怡然做手术、入职以及爸妈来成都。然后一晃就是一年，大家都说我还小，但我已经开始感觉到时间过得快的吓人。</p>
<h2 id="DOTA">DOTA</h2><p>一上来就讲dota，不是因为它最重要，而是在这一年里它给了我新的意义。从单排到开黑，从DOTA1到DOTA2，从本科到毕业，伴随着DOTA的成长我们也一起慢慢长大。那些本科的记忆，兄弟间的情谊，都和DOTA缠绕在一起。有时候仅仅是上线看铭铭或者建行打上一小会儿，那感觉好像又回到623站在他们身后一样。Pis或者09的视频下面经常有这样的留言，“现在工作了没时间打，但还是喜欢来看看视频，这是一种别人不能理解的怀念方式”。厅长经常说东哥当年打大鱼人、主任玩lion的故事。</p>
<p>DOTA，原来是很多人的青春。</p>
<h2 id="毕业">毕业</h2><p>计划着毕业旅行、计划着拍毕业照、计划着毕业聚餐，总以为很周全的计划，现在回头想想，才觉得毕业的那么仓促。我时不时的联系你们，希望我们不要忘记。</p>
<p>过年回来宝铁在帅府街宴请小团体。我从西城墙一路走过来，感觉每一步迈过去，都是一大段的回忆。东方广场周边的房子都拆了，我最终还是没机会请桐桐吃上一碗传说中的瓦罐面。一中门口卖盒饭的小房子已经岌岌可危，也是第一次去小房子对面的公厕。出门东拐去帅府街，那个消防队还在，以前在操场经常能听到这里的号声。丁字路口的电线杆子也在，当年就在这个路灯下，跟三儿说我好像考砸了，可能要去成都。这里往前是跟嘉琪海龟周末常去吃的兰州拉面，往右是三儿当年租的房子，高考后的那个暑假，在这里住了很久，吃了很多包子。</p>
<p>年后大聚餐去了一多半人，好多同学四年没见，谈不上激动，不过见到老同学的确挺开心。虽说现在分处天南海北，但还是想说，有事没事常联系。</p>
<h2 id="变老">变老</h2><p>人到了一定年纪之后就习惯把“老了”当做玩笑话挂在嘴边。可当真发现老了的时候，未必有多可笑。在外漂泊一年，除了明白钱难挣，屎难吃的道理之外，最大的感受就是时间过得太快。</p>
<p>今年回来发现爷爷脖子上的肉好像比去年更松了，爸爸的白头发更多了，前几天哥哥也当爸爸了。当时爷爷说了一句，“真快，你大姑也当奶奶了”。</p>
<p>我想我现在可能无法体会到一个人说自己的孩子当奶奶了的时候会是一种怎样的感受，但我知道，大家都变老了，我们所有人。</p>
<p>我翻着老照片，看着我们一点点变成长辈们年轻时的模样。</p>
<blockquote>
<p>门前老树长新芽/院里枯木又开花/半生存了好多话/藏进了满头白发</p>
<p>——《时间都去哪了》</p>
</blockquote>
<h2 id="幸福">幸福</h2><p>很久之前，偶然间进了羊蛋和晓波的情侣空间，记不清具体的等级了，总之那是个让我羡慕的数值，去年他们结婚了，我没能回来，再这里再次送上祝福。</p>
<p>倒不是我在孩子气的攀比谁的等级更高，而是我觉得，那是一点一滴的积累，那是平平淡淡的幸福。现在，我也拥有了这样的幸福。周一到周五工作学习打电话，周末一起吃遍成都玩转成都。偶尔还是会生气吵架，我也偶尔还是会孩子气不懂事，但我们现在拥有的是一份被两个人用心经营的很稳定的感情。即使天翻地覆，亦然心照不宣。这种感觉无法复制，更无法替代。我们会越走越好，点点滴滴都更好。从毕业来成都工作的那一刻起，你，甚至整个家庭对这份感情的付出我都看得到，也必定有回报。</p>
<p>说不清未来的路，但至少有陪伴，有幸福。</p>
<h2 id="博士">博士</h2><p>这不是荣誉。</p>
<p>待我脚踏实地干五年。</p>
<p>然后给你们讲这些年的故事。</p>
<hr>
<p>明天一早又要踏上去成都的路，临行前晚，躺在床上辗转难眠。回忆虽好，但难免伤感，略不符合新春氛围。</p>
<p>只希望大家都好。</p>
<p>来年见。</p>
]]></content>
    <summary type="html">
    <![CDATA[一篇拖了很久很久的年末总结]]>
    
    </summary>
    
      <category term="life" scheme="http://cubernet.cn/blog/tags/life/"/>
    
      <category term="生活归档" scheme="http://cubernet.cn/blog/categories/%E7%94%9F%E6%B4%BB%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[博客新增阅读书单和观影列表子栏目]]></title>
    <link href="http://cubernet.cn/blog/readinglist/"/>
    <id>http://cubernet.cn/blog/readinglist/</id>
    <published>2014-10-22T16:39:16.000Z</published>
    <updated>2015-04-29T17:54:26.000Z</updated>
    <content type="html"><![CDATA[<p>前天下午无意中看到一个博客中的阅读书单栏目，觉得把自己读过的或准备读的书记录下来是一个很好的想法，于是决定在我这里也模仿实现一个。用了一天时间，现在基本上完成啦。</p>
<p>犹豫平时闲暇时间更多的用来看电影了<img src="http://cubernet.cn/assets/smilies/5.gif" id="smiley">，所以又特意增加了一个记录电影的<a id="more"></a>子栏目。以后大家就可以通过电脑（出于排版优化的问题，手机访问时左边的导航栏默认是不显示的）访问我博客的<a href="http://cubernet.cn/books/" target="_blank" rel="external">阅读书单</a>和<a href="http://cubernet.cn/movies/" target="_blank" rel="external">观影列表</a>来与我交流分享好看的书或者电影了。</p>
<p>这一天的时间里，整理资料和编写代码的时间基本上一半一半吧。先说整理资料的事情。</p>
<p>由于电影基本上都是陪女朋友一起去电影院看的，而且我们有收集电影票的习惯，所以如果只是简单的列出条目应该比较简单。但是书单就没这么容易了。小说类的图书基本上都是看的电子版，看过就删，所以现在已经很难想起这几年看过哪些小说了。技术类的图书基本都是买正版纸质书，所以列出来的也算比较全。唯一遗憾的是很多书都是读了一半就放在一边了。这个毛病要改正，那些没读完的书，也要抽时间一点一点读完。</p>
<p>重点说这个书单和观影列表技术实现方面的事情。</p>
<p>首先是网页模板这边的工作量。每个子栏目都需要建立一个总的统计页面，每个具体的列表页面，也和普通博文的页面样式不同。所以首先给这两类页面写了相应的模板，保存在_layouts文件夹下。然后在css文件中调整页面布局，最后在手机端测试，做手机端的浏览优化。整个流程下来，耗时约两小时。</p>
<p>当我私以为小屋已经搭好，马上就可以上线时才发现，书单内容和电影详情的录入是一件多么耗时耗力的事情。再加上栏目建立初期，需要同时统计过去几年内的东西，想起来就觉得可怕。</p>
<p>不过一想到万事开头难，便咬着牙开始一一录入。又过了不知好久，书单详情录入完毕。发布，刷新，恩，效果还算满意。<img src="http://cubernet.cn/assets/smilies/10.gif" id="smiley"></p>
<p>可是再当我录入一个电影详情再做测试时，发现图片竟然加载不了。一研究，原来是豆瓣电影对图片做了防盗链，页面上所有引用豆瓣电影的图片全部显示为X<img src="http://cubernet.cn/assets/smilies/15.gif" id="smiley">。没想到同属豆瓣，豆瓣读书和豆瓣电影竟然对图片的处理上相差了这么多，不知道是因为背后的技术团队不同还是出于版权的考虑。总之，对我而言，豆瓣的图我是没办法用了。如果说手动复制粘贴链接还能忍受的话，那么每个图片都要手动寻找链接，然后下载，然后改名、另存为，最后把本地链接写到页面上，这么一套全部手工实现的话，我想接下来这一周我都有事情做了。所以，我又自然而然的操起老本行，用爬虫帮我下载。</p>
<p>既然决定写脚本，不如全部工作就都由脚本来实现好了。于是有了如下的脚本：</p>
<p><img src="http://7xikui.com1.z0.glb.clouddn.com/2014-10-23-readinglist2.png-blogpic" alt="image"></p>
<p>脚本的源码可以在我github库中下载。简单说下实现思路及功能：</p>
<p>功能：</p>
<ul>
<li>根据输入的电影名称，自动在豆瓣电影中搜索该电影</li>
<li>从搜索结果中自动提取该电影的导演、主演等信息</li>
<li>根据输入的年份，将提取到的电影信息按到指定的格式追加写入到对应年份观影列表的.md文件中</li>
<li>将该电影的主题海报自动下载并归类保存在posters文件夹中，并将生成的链接加入到.md文件中</li>
</ul>
<p>实现思路：</p>
<ul>
<li>Python脚本实现</li>
<li>最基本的根据指定url爬取对应页面内容</li>
<li>将爬虫访问行为伪装成用户的浏览器访问行为</li>
<li>正则表达式提取关键字段</li>
<li>读取本地文件，并在指定位置追加写入新的内容</li>
<li>Python脚本命令行参数读取</li>
</ul>
<p>最终实现的效果是，我只需要<code>python douban.py -y 2014 -n 心花怒放 -p xhnf</code>这么一行命令，即可完成<code>心花怒放</code>的信息爬取、海报下载和观影列表文件内容的自动填充。于是，我用了几分钟，完成了三十多部电影信息的添加<img src="http://cubernet.cn/assets/smilies/28.gif" id="smiley">。</p>
<p>记得有人说过，人和猿最大的区别是是否懂得使用工具。我一直以为这句话的另一种表达方式是人会使用工具而猿不会。</p>
<p>看来我理解反了。<img src="http://cubernet.cn/assets/smilies/38.gif" id="smiley"></p>
]]></content>
    <summary type="html">
    <![CDATA[阅读书单 观影列表]]>
    
    </summary>
    
      <category term="Python" scheme="http://cubernet.cn/blog/tags/Python/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PVM环境配置]]></title>
    <link href="http://cubernet.cn/blog/pvm/"/>
    <id>http://cubernet.cn/blog/pvm/</id>
    <published>2014-10-13T16:39:16.000Z</published>
    <updated>2015-04-29T17:54:51.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>并行计算机（pvm）是用于网络并行计算机上的软件工具。设计它的目的是将异构的计算机网络连接起来，使它使用起来就像一组分布式的并行处理器。</p>
<p>——百度百科</p>
</blockquote>
<p>PVM即Parallel Virtual Machine，并行虚拟计算机，是一个软件包，它能够把一些安装有Unix或Windows系统的计算机组成一个异构系统，使其用起来就像一个单一但能力强大的并行计算机。PVM支持的异构性分为三层：机器层、应用层和网络层。</p>
<a id="more"></a>
<h4 id="PVM的特点">PVM的特点</h4><ul>
<li>支持多用户及多任务</li>
<li>提供便于使用的通信原语</li>
<li>提出了进程组的概念</li>
<li>可无差别地运行在多种操作系统上</li>
<li>具有容错功能</li>
</ul>
<h4 id="PVM的安装">PVM的安装</h4><p>PVM是一套跨平台的软件系统，我是在Ubuntu Server 10.04.4版本下安装并测试的。</p>
<p>Ubuntu环境下安装PVM是一件十分简单的事情。只需要在终端中执行<code>$sudo apt-get install pvm</code>即可。</p>
<p>接下来，我们需要查看一下PVM安装在了系统的哪个位置。通常在/usr/lib/pvm3或/usr/local/lib/pvm3中。include文件夹在/usr/include路径下。</p>
<p>知道了安装路径后就可以在.bashrc文件中设置环境变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">export</span> PVM_ROOT=<span class="string">"/usr/lib/pvm3"</span></span><br><span class="line"><span class="built_in">export</span> PVM_ARCH=`<span class="variable">$PVM_ROOT</span>/lib/pvmgetarch`</span><br><span class="line"><span class="built_in">export</span> XPVM_ROOT=/usr/bin/xpvm</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$PVM_ROOT</span>/lib:/usr/include</span><br><span class="line"><span class="built_in">export</span> PVM_RSH=`<span class="built_in">which</span> ssh`</span><br></pre></td></tr></table></figure>
<p>在home目录下建立.rhosts文件，在rhost文件中列出当前可用的计算机名或者IP地址。</p>
<h4 id="PVM的使用">PVM的使用</h4><p>在终端中输入pvm，进入PVM的控制台界面。</p>
<blockquote>
<p>pvm&gt;</p>
</blockquote>
<p>如果有新的结点需要增加，则输入下面的命令：</p>
<blockquote>
<p>pvm&gt;add <hostname></hostname></p>
</blockquote>
<p>hostname是你想添加的计算机名称或者IP。</p>
<p>在PVM的终端界面还有很多交互命令，可以输入<code>help</code>来查看。</p>
<p>在这个网站上有一个基于PVM的矩阵乘法示例程序=》<a href="http://math.arizona.edu/~swig/documentation/pvm/matrix_mult/" target="_blank" rel="external">PVM Matrix Multiplication Example</a></p>
<p>下载上面提供的master.c、slave.c和Makefile.aimk文件，在本地编译：</p>
<pre><code><span class="title">aimk</span> mm_master mm_slave
</code></pre><p>如果编译成功了，则可以进入PVM中运行：</p>
<blockquote>
<p>pvm&gt;spawn -3 -&gt;mm_master</p>
</blockquote>
<p><code>spawn</code>是向PVM中加载任务。然后程序会自动运行，将计算结果保存在mat.out文件中。</p>
<h4 id="并行算法">并行算法</h4><p>上述示例程序中使用了外积算法，即每个结点每次独立运算得到结果矩阵C的一行数值：</p>
<p><img src="http://latex.codecogs.com/png.latex?C_{*j}=\(c_{1j},c_{2j},...,c_{mj}\" alt="image">%20^{\tau}%20=%20\sum<em>{k=1}^{n}(a</em>{1k},a<em>{2k},…,a</em>{mk})^{\tau}b_{kj},j=1,2,…,p)</p>
<blockquote>
<ul>
<li>矩阵a保存在master中；</li>
<li>矩阵b分别在每个slave结点只能中保存一份；</li>
<li>master把矩阵a的每一行发送给一个单独的slave；</li>
<li>如果结点数小于a的行数，则等待某些slave运算完成并返回结果时，再向其分发新的任务；</li>
<li>master在收到所有slave返回的结果后，把结果c保存在mat.out文件中。</li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[PVM   并行计算   矩阵乘法]]>
    
    </summary>
    
      <category term="PVM" scheme="http://cubernet.cn/blog/tags/PVM/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Markdown中使用数学公式]]></title>
    <link href="http://cubernet.cn/blog/mdformath/"/>
    <id>http://cubernet.cn/blog/mdformath/</id>
    <published>2014-10-10T16:39:16.000Z</published>
    <updated>2015-05-04T14:53:15.000Z</updated>
    <content type="html"><![CDATA[<p>上一博文是翻译的一篇学术论文，在用markdown语法编辑译文时，发现原文中出现的公式不知如何插入。</p>
<p>当然，能想到的一个简单的办法就是，把原文中的公式截图，然后在译文中插入图片。但是，作为一个天生爱折腾的工科男，这样的解决办法显然满足不了我。</p>
<a id="more"></a>
<p>用百度谷歌了一番之后发现，原来还真有别的办法。那就是将LaTex强大的数学公式排版能力与Markdown相结合。</p>
<p>第一步，将原文中的公式用Latex语法描述出来。</p>
<p>第二步，将这段LaTex语法描述的公式转化成图片插入到Markdown文本中。这里有两个可以调用的接口。</p>
<p>七十二松网站的Latex服务调用接口：</p>
<blockquote>
<p><a href="http://tex.72pines.com/latex.php?latex=$LaTeX公式代码$" target="_blank" rel="external">http://tex.72pines.com/latex.php?latex=$LaTeX公式代码$</a></p>
</blockquote>
<p>Google的Latex服务调用接口：</p>
<blockquote>
<p><a href="http://latex.codecogs.com/png.latex?LaTex公式代码" target="_blank" rel="external">http://latex.codecogs.com/png.latex?LaTex公式代码</a></p>
</blockquote>
<p>当然，看到这里，有些同学可能会说，用LaTex语法编写数学公式的门槛太高，需要太多时间去熟悉、记忆。其实你大可不必担心，推荐给大家一个很好的在线LaTex公式编辑器，<a href="http://www.codecogs.com/latex/eqneditor.php" target="_blank" rel="external"><strong>传送门</strong></a>。有了它，分分钟写出自己想要的LaTex公式不是梦。当然，这个网站也提供了丰富易用的调用接口，大家也可以直接利用。</p>
<hr>
<p>还有一种方法我没有尝试，但是整理在这里，供大家参考。其实也很简单，那就是使用<a href="http://www.mathjax.org" target="_blank" rel="external"><strong>MathJax</strong></a>，只需要在你的页面添加几行代码，就可以解析LaTex、MathML等语法描述的数学公式了。如果你用过，欢迎与我交流使用感受<img src="http://cubernet.cn/assets/smilies/16.gif" id="smiley">。</p>
]]></content>
    <summary type="html">
    <![CDATA[markdown latex]]>
    
    </summary>
    
      <category term="LaTex" scheme="http://cubernet.cn/blog/tags/LaTex/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【译】网络钓鱼检测：综述]]></title>
    <link href="http://cubernet.cn/blog/phishing-review/"/>
    <id>http://cubernet.cn/blog/phishing-review/</id>
    <published>2014-10-09T16:39:16.000Z</published>
    <updated>2015-04-29T17:55:15.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://ijcsmc.com/docs/papers/February2014/V3I2201499a42.pdf" target="_blank" rel="external"><strong>原文地址</strong></a>： <a href="http://ijcsmc.com" target="_blank" rel="external">http://ijcsmc.com</a> /docs/papers/ February2014/ V3I2201499a42.pdf</p>
<p>作者：Feon Jaison1, Seenia Francis</p>
<p>感谢Feon Jaison1, Seenia Francis提供的优质文章。</p>
<p>这篇文章在我最近项目的完成过程中给予了很大的帮助，特在此表示感谢，并翻译之。</p>
<a id="more"></a>
<p>下面是译文内容：</p>
<p><strong>摘要</strong>：网络钓鱼是指通过电子邮件或其他网络聊天服务，试图窃取用户身份信息或银行卡号、密码等个人信息的行为。通常，攻击者会伪装成一个相关组织，引导受害者访问一个伪造的官方网站，进而通过这个钓鱼网站收集用户的个人信息。攻击者也会通过诱导用户点击内嵌在电子邮件中的链接使用户在未知情况下下载恶意软件。</p>
<p>研究者们提出了一些防止用户受到钓鱼攻击的方法。常见的方法有：防火墙技术、黑名单技术、垃圾邮件技术、假冒网站监测技术、客户端插件和用户安全意识教育等。每种现有的技术都有各自的利弊。如何自动识别钓鱼攻击目标是目前反钓鱼工作中最重要的问题。如果我们知道某个页面包含钓鱼攻击目标，我们就可以确认含有该目标的页面都是钓鱼页面。这可以帮助站长更好的识别钓鱼攻击，从而使他们能够立即采取必要的反制措施。</p>
<p><strong>关键词</strong>：钓鱼网站，分裂式聚类算法，分类</p>
<h3 id="1-介绍">1.介绍</h3><p>本文主要探讨钓鱼检测的重要性并对现有的几种检测方法做出评价。钓鱼攻击每年都给许多上网用户造成巨大损失。我们的目标是将基于人工的黑名单验证技术和具有低误报率的启发式方法相结合。所以，我们之后阐述的检测方法都是在人工验证黑名单的基础上，应用各种新的技术。从卡内基梅隆反网络钓鱼和网络分析工具中引入的功能在很大程度上与基于机器学习的网络钓鱼检测很相似。这种启发式检测通常都利用了URL相似度计算、域名概率评估、IP地址和端口号检测等技术。进一步，我们可以通过Google Page rank等第三方库，查询网站的排名、注册内容等其他信息。相比于之前基于签名的模型，这种方式显著的增加了钓鱼网站的检测效率。这种方法可以检测出各种含有钓鱼攻击和异常行为的网站。</p>
<p>网站的页面内容一方面能够很好地展现该站点的目的和意愿，另一方面也成为钓鱼欺诈信息的主要显示途径。目前，包括决策树、支持向量机、朴素贝叶斯分类、神经网络在内的很多机器学习算法已经被应用到检测模型的训练中，通过该模型来预测一个给定的网站是否为钓鱼站点。聚类和分类是数据挖掘的两个根本任务。分类是一种有监督的学习方法，而聚类是无监督的。聚类的目的是对现有数据做出描述，而分类则是做出预测。我们把相似的聚类实例数据划分到一个子集，不同的子集包含不同种类的数据。通过这种方式，将数据划分成具有高度代表性的若干子集。形式上，聚类结构被表示为一组子集。我们划分子集的依据是各个实例数据之间的距离。目前有两种常见的方法来估算两个数据之间的关系，分别是距离度量和相似性度量。许多聚类算法都是通过距离度量来判断数据之间的相似性。这里我们把Xi和Xj之间的距离表示为d(Xi,Xj)。</p>
<p>相似函数被认为是一种替代概念上的距离，即向量xi和xj的距离函数s(xi,xj)。这个函数应该是对称的，例如满足s(xi,xj)=s(xj,xi)。通过余弦函数求得两个向量的夹角作为衡量它们相似性的方法，归一化的向量内积也是一种有效的相似性度量方法。现有的基于黑/白名单的钓鱼模型的工作流程为，当用户访问一个网站时，反钓鱼工具首先在数据库中存储的黑名单内搜索该网站的地址。</p>
<p>如果数据库中包含该访问的网站地址，那么反钓鱼工具将引导用户避免钓鱼攻击。包括来自EarthLink的公司Scam Blocker,Phish Guard和Net craft等都是属于这一类型的工具。在基于规则的检测方法中，通过在软件中内置过滤规则，然后通过这些规则来检测一个网站的安全性。这种类型的工具包括斯坦福大学开发的Spoof Guard等。Spoof Guard会检查域名、URL，它也会检测电子邮件中的链接地址是否指向当前URL。一旦检测出当前访问网站的域名与某著名网站域名相似，或者该站点没有使用标准端口，Spoof Guard就会提醒用户小心钓鱼网站。这些工具都提供了浏览器插件，以便于通知用户当前访问的站点是否可信。</p>
<p>钓鱼网站智能检测是通过各种分类算法进行特征提取，进而基于特征提取模块对各种钓鱼网站特征的提取结果做层次化聚类。</p>
<p>1）特征提取是模式分类中的重要问题。这个过程包括了如何基于信息之间的相互性来选择有效的特征。由于直接执行最大相关性的条件非常苛刻，所以我们采用了一种叫做最小冗余-最大-相关准则的等效方式来用于一阶的增量特征选择。这个过程包括从N个样本中选择特征，例如，一个特征选择问题就是从M维观测空间R(M)，得到m个特征的子空间。</p>
<p>2）朴素贝叶斯分类认为所有这些属性对于“这种水果是苹果”推断的贡献是相互独立的。它只需要少量的训练数据来估计所需的分类参数，即基于均值和方差的朴素贝叶斯概率模型。该概率模型的分类器是由相关变量C在F1到Fn的若干特征变量作用下得出。</p>
<p>3）定义统计学习的最好方法称为有监督学习。在此，每个数据点都包含一个特征向量x和一个类标签y，并假定有一个函数f，使得y=f(x)满足每个训练数据点(x,y)。学习算法的目标是找到一个很好的近似ħ到f可以应用到分配标签到新的x值。函数h称为分类器，因为它以输入数据点×分配类标签y。有监督学习可以应用到许多问题，包括手写识别，医疗诊断。</p>
<p>4）聚类是一种用于将数据元素融入到相关组中的数据挖掘技术。数据挖掘通过分析不同的立体数据和所述数据，并对其进行分类、总结，最后将其转化为有用的信息。通常使用聚类分析，归纳，决策树等方法做分析，最流行的方法是将数据分成不相交的组。层次化聚类将测量2元组和其指定的集的成对距离的函数相异性之间的距离。</p>
<h3 id="2-应用">2.应用</h3><p>该反钓鱼软件可以部署在以下4种不同的场景中。</p>
<p>1）将反钓鱼过滤器集成在浏览器本身。</p>
<p>2）将反钓鱼过滤器集成在安全类软件中。</p>
<p>3）将反钓鱼软件集成在路由器中。</p>
<p>4）在电子邮件软件中集成反钓鱼过滤器，或者阻塞由虚拟主机服务器发送的电子邮件。</p>
<h3 id="3-结论">3.结论</h3><p>网络钓鱼已经成为一个严重的网络安全问题，每年对消费者和电子商务公司造成数十亿美元的经济损失。网络钓鱼攻击可以通过用户举报，图像监控，蜜罐以及其他技术相结合的方式来检测。通过广泛部署电子邮件认证技术，如发件人ID和加密签名，来降低网络钓鱼邮件被成功发送到用户邮箱的可能性。个人身份信息应包括在所有电子邮件通信系统中，并且系统应该允许用户输入或选择自定义文本和图像。基于浏览器插件的反钓鱼工具栏在识别钓鱼网站，检测到潜在的网络钓鱼网站时加高安全性等方面非常有效。</p>
<p><strong>REFERENCES</strong></p>
<p>1) Feature Selection Based on Mutual Information: Criteria of Max-Dependency, Max- Relevance, and Min- Redundancy Hanchuan Peng, Member, IEEE, Fuhui Long, and Chris Ding.</p>
<p>2) Hierarchical Clustering Algorithm - A Comparative Study,Dr.N.Rajalingam K.Ranjini Dept. of Management Studies.</p>
<p>3) CANTINA: A Content-Based Approach to Detecting PhishingWeb Sites.Yue Zhang Dept of Computer Science University of Pittsburgh 210 South Bouquet Street.</p>
<p>4) Naive Bayes Classifier.</p>
<p>5) Web Phishing Detection In Machine Learning Using Heuristic Image Based Method, Vinnarasi Tharania. I,<br>R. Sangareswari , M. Saleembabu International Journal of Engineering Research and Applications ISSN: 2248-9622</p>
]]></content>
    <summary type="html">
    <![CDATA[网络钓鱼 机器学习 聚类 分类]]>
    
    </summary>
    
      <category term="Phishing" scheme="http://cubernet.cn/blog/tags/Phishing/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开学记]]></title>
    <link href="http://cubernet.cn/blog/xiabb/"/>
    <id>http://cubernet.cn/blog/xiabb/</id>
    <published>2014-09-15T16:39:16.000Z</published>
    <updated>2015-05-04T14:56:55.000Z</updated>
    <content type="html"><![CDATA[<p>作为一名资深老学生，本已没有心情再去关心开学放假这种逗小朋友的事情，但不得不承认今年开学这两周所经历的一些事还是让我有了很多感触。拟题<code>xiabb</code>，后又觉得有失风度，遂改为<code>开学记</code>。</p>
<p>感觉上一直是从年初3月份来校后一直忙过来的，虽然中间夹杂着毕业季和暑假，但对我来说貌似都是夹杂在忙碌中的很普通的日子。直到突然有一天收到系统发送的欢迎新生报道和提示新生缴费的短信时，才意识到，又开学了。</p>
<a id="more"></a>
<p>于是又看到在军训的大一，又看到在招新的大二，又看到在卖新生用品的大三和攻陷图书馆的大四。我骑着车飞速的穿越在人群中，眼中的每一幕都是曾经的自己。当然，我也像师兄师姐一样经历着他们的过去。水水的报道，水水的体检，贪婪的选课后又疯狂的逃课。</p>
<p>说到上课，我不知道现行的培养方案是出于何种考虑制定出来的。我只是觉得，这种为了学分而选课，为了上课而上课的方式，对学生的成长来说，收效甚微。再从学时上看，很多有意义有价值的课程都被设定为选修课，课堂上老师只能蜻蜓点水的讲，很快学时上完，然后草草收场。而另外一些相对基础相对简单的课程，却安排了大量的学时，所以90分钟的课堂编成了60分钟的瞎扯和30分钟的干货。试问，何不只安排学生听30分钟，把剩下的时间交给学生自己去做点有意义的事情呢？</p>
<p>我不是喜欢翘课，我只是觉得，在现在这种教学体制下，或许学校和老师也都出于无奈，但，我要为自己负责。</p>
<hr>
<p>前几天在河畔上看到一位毕业师兄发的帖子。帖子的内容大概是列举了几位本科班级上不同成绩同学毕业后的不同选择以及现状，然后和他自己作比较，得出结论是推荐出国和工作。恰逢最近也是大四决定保研出国的时间段，前来跟我讨论这个话题的同学也比较多。我的观点是，我们不能仅仅通过自己的例子或者身边几个师兄师姐的例子就简单的说工作好还是读研好，国内好还是国外好，读硕好还是读博好。我认为，能够决定你选择的只有你自己；换句话说，这个选择好不好，是要看人的。诚然国外的教育理念和教育水平要比国内很多院校都强，但是如果你英语烂到掉渣，如果你连国内普通学生最基本的水平都没有达到，那么你出国的意义是什么？难道仅仅是为了在朋友圈里发几张米国月亮的照片来刷存在感么？再说工作还是读研。见过很多在读研究生，整天啥事不干在那抱怨读研有多坑，那些工作的同学现在混的有多好，早知道当初不读研了之类的。试问，你只看到了那些同学辉煌的一面，你没看到的是当你还在考虑提前十分钟早退去食堂吃饭，当你还在跟导师“斗智斗勇”争取少做一点事情，当你还在睡懒觉刷网页时，你的那些同学在做什么。他们的辉煌是靠加班、靠付出一点一滴换来的。那些读研的同学中必定也有混的不错的。<code>使你变成现在这样的，不是当初的选择，而是自身的懒惰。</code>最后还有同学犹豫要不要读博。对于这个问题，我只想说，不要通过硕士和博士以后的待遇或发展来决定自己的选择。如果你是一个适合钻研耐得住独孤的人，那么如果只读硕士，你可能会发现没有一个很好的平台去支持你的研究。当然读博需要考虑更多的因素，时间、能力、感情、经济，等等。</p>
<p>说了这么多，实在是被问烦了，那些加了QQ上来就问选哪个挣钱多的人，我真心是恨不得直接拉黑。其实就是一句话，根据自己的客观条件，选择最适合自己的，然后<code>脚踏实地</code>做下去，今天吃的苦，以后笑着说出来就是了。当然，如果你有一个<code>脚踏实地</code>做下去的爹，那可以直接忽略以上所有。</p>
<hr>
<p>最后谈谈自己。再次从最近手上的这个项目中领略到，摆正态度是做好一件事情的先决条件。最近睡的比较晚，整天都在向科研大神看齐，琢磨着如何优化如何发文。自我感觉在方式方法上已算简单入门，坚持下去，那些想要的东西应该是早晚的事。继续加油。</p>
<hr>
<p>一不小心写了这么多，就像开篇说的一样都是xiabb，我是开玩笑的，您别当真。<img src="http://cubernet.cn/assets/smilies/37.gif" id="smiley"></p>
]]></content>
    <summary type="html">
    <![CDATA[记录开学两周的一些想法]]>
    
    </summary>
    
      <category term="Life" scheme="http://cubernet.cn/blog/tags/Life/"/>
    
      <category term="生活归档" scheme="http://cubernet.cn/blog/categories/%E7%94%9F%E6%B4%BB%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[墙里墙外]]></title>
    <link href="http://cubernet.cn/blog/overthewall/"/>
    <id>http://cubernet.cn/blog/overthewall/</id>
    <published>2014-08-20T16:39:16.000Z</published>
    <updated>2015-04-29T17:55:43.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>秦筑长城比铁牢，蕃戎不敢过临洮。</p>
<p>虽然万里连云际，争及尧阶三尺高。</p>
<p>——《长城》【唐】汪遵</p>
</blockquote>
<p>“互联网”这个词现在已经逐渐为大众知晓，“长城”一词也自古就时常出没于文人骚<a id="more"></a>客的笔下，但是“互联网中的长城”即<code>GFW</code>，可能不是所有的人都听过。GFW即Great Firewall of China（翻译过来是长城防火墙），是我国在中国网络出口处部署的一套网络安全系统。</p>
<p><code>GFW</code>其实早已名声在外，在大众眼中，它的作用无非就是让国内的网民无法访问国外的网站，在一定程度上也不允许国外的网民访问国内的网站。从这个角度来看，这个防火墙以及它的主要创建者背负那么大的骂名也是可以理解的。作为网络安全实验室中的一员，我一直不愿对GFW做太多的评价。我只想说，GFW还是很有必要的，方校长也没有那么可恶。</p>
<hr>
<p>但是。</p>
<p>但是但是。</p>
<p>凡事要有度。要有度啊！</p>
<hr>
<p>最初，你们说不允许连接国外的H网<img src="http://cubernet.cn/assets/smilies/23.gif" id="smiley">无所谓啊，反正对外国人无感</p>
<p>然后，你们又说Facebook、Twitter也不要访问了，上面的反动言论太多<img src="http://cubernet.cn/assets/smilies/37.gif" id="smiley">无所谓啊，反正我也没有外国朋友</p>
<p>接着，包括Google在内的一大波常用网站开始沦陷，据说原因比较复杂，不能全怪GWF<img src="http://cubernet.cn/assets/smilies/7.gif" id="smiley">好吧，那我就勉强https访问谷歌香港呗，虽然好多博客访问不到了，至少还能访问Stack Overflow等等</p>
<p>最后，你们连同Stack Overflow、github、谷歌学术一起封了<img src="http://cubernet.cn/assets/smilies/33.gif" id="smiley">我只想说一个程序猿讨论编程问题的地方、一个程序猿分享代码的地方、一个程序猿搜索论文的地方，你TMD封个蛋蛋！大家都是程序猿，相煎何太急。</p>
<hr>
<p>不知道别人是什么情况，反正我有一种良民被逼上梁山的感觉，我这个胖子也不得不开始翻墙。不过，我还是觉得GFW是有必要存在的，只是没必要这么过分。想到最近爆出的各种后门、漏洞，好多<code>专家</code>又开始建议什么政府级办公电脑要采用国产操作系统啦，相关人员不许使用iPhone啦等等<img src="http://cubernet.cn/assets/smilies/10.gif" id="smiley">。同样的道理，不是说不需要防范国外的软硬件，而是要有个度，毕竟国内在相关领域很多地方都还是空白。你说不用Windows，难道要用DOS？<img src="http://cubernet.cn/assets/smilies/21.gif" id="smiley">不对，好像DOS也不是国产的。师夷长技以制夷，闭关锁国，一步之遥。</p>
<hr>
<p>好了，牢骚发泄完了，下面进入正题。</p>
<p>相信那些免费的翻墙软件大家都已经很熟悉了。相关的安装配置教程网上也是一搜一大把，这里就不再赘述。我想向大家推荐的是一个收费的VPN解决方案。相比于免费的翻墙工具，收费的不用担心流量、速度、稳定性等问题，个人觉得还是物有所值的。采用这套VPN及即将介绍的路由配置方法，可以达到国内国外网站访问VPN自动切换的效果，完全无感访问。<img src="http://cubernet.cn/assets/smilies/12.gif" id="smiley"></p>
<p>大家点击这个链接<a href="http://gjsq.me/1915340" target="_blank" rel="external"><strong>点击访问</strong></a>或者博客主页左侧栏中的购买按钮可以进入GreenVPN的主页进行了解或购买。算下来一个月大概十几块钱，前期注册即送200M体验流量，可以先体验后付费。</p>
<p>通过下载这个脚本<a href="https://code.google.com/p/chnroutes/wiki/Usage" target="_blank" rel="external"><strong>点击下载</strong></a>，可以让vpn客户端在进行连接的时候自动执行。通过这些路由脚本, 可以让用户在使用vpn作为默认网络网关的时候，不使用vpn进行对中国国内ip的访问，从而减轻vpn的负担，增加访问国内网站的速度。具体使用方法在下载页面有详细的说明，不同操作系统方法略有不同。</p>
<hr>
<p>有了这两个宝贝，从此便可以随意穿梭于墙里墙外了。友情提示，多读论文，少看小电影。当然，如果你觉得这个工具对你有用，建议点击我提供的链接访问GreenVPN进行购买，这样我会得到小额回报，就当是大家送我的二十二岁生日礼物了。<img src="http://cubernet.cn/assets/smilies/37.gif" id="smiley"></p>
]]></content>
    <summary type="html">
    <![CDATA[翻墙 GWF VPN]]>
    
    </summary>
    
      <category term="VPN" scheme="http://cubernet.cn/blog/tags/VPN/"/>
    
      <category term="翻墙" scheme="http://cubernet.cn/blog/tags/%E7%BF%BB%E5%A2%99/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【译】在iOS上以root身份运行守护进程]]></title>
    <link href="http://cubernet.cn/blog/rootdaemon/"/>
    <id>http://cubernet.cn/blog/rootdaemon/</id>
    <published>2014-08-05T16:39:16.000Z</published>
    <updated>2015-04-29T17:55:53.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://bbs.iosre.com/forum.php?mod=viewthread&amp;tid=204&amp;page=1&amp;extra=#pid1096" target="_blank" rel="external">原文地址</a>：<a href="http://bbs.iosre.com" target="_blank" rel="external">http://bbs.iosre.com</a> /forum.php? mod=viewthread &amp;tid=204&amp;page=1 &amp;extra=#pid1096</p>
<p>作者：snakeninny</p>
<p>感谢snakeninny提供的优质文章。</p>
<p>这篇文章在我最近项目的完成过程中给予了很大的帮助，特在此表示感谢，并翻译之。</p>
<a id="more"></a>
<p>下面是译文内容：</p>
<h2 id="第一部分_基础理论">第一部分 基础理论</h2><ol>
<li><p>守护进程</p>
<p> 什么是守护进程？根据<a href="http://http:en.wikipedia.org/wiki/Daemon" target="_blank" rel="external">wikipedia</a>的解释，守护进程是一个运行在计算机后台、不受前台用户交互影响的进程。通常，守护进程以字母<code>d</code>结尾，例如，syslogd是处理系统日志的后台进程，sshd是处理SSH链接请求服务的进程。你可以以<code>backboardd</code>,<code>mediaserverd</code>,<code>apsd</code>等 来命名iOS上的其他后台进程。 后台进程是由iOS上的第一个进程<code>launchd</code>启动的，launchd是开机时启动的第一个进程。那么守护进程能做什么呢？“它可以为网络请求，硬件活动以及一些处理其他任务的程序提供后台服务”。<strong>注意：以root身份运行的后台进程功能非常强大，并且非常隐蔽，很多时候也许超级管理员都不知道有一些后台进程在偷偷运行。所以，一些恶意软件就是以后台进程的形式存在的。这篇文章只是用来交流学习，如果你去做非法的事情，后果自负。</strong></p>
</li>
<li><p>守护进程的所有者</p>
<p> 守护进程是由launchd启动，通过“launchctl”命令加载配置文件。我们要特别注意在这个<a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/launchctl.1.html" target="_blank" rel="external">查询手册</a>中提到的，“LaunchAgents启动加载的每个配置文件必须属于启动加载它们的用户。所有的系统后台进程必须属于root用户。”配置文件不可以是属于“group-”或者任何人可写。这些限制是出于安全考虑，因为如果一个启动配置文件是任何人可写的话，那么就有可能出现在程序启动时配置文件被恶意修改的情况。因为后台进程是由launchd启动的，所以它应该属于root:wheel：</p>
<pre><code><span class="constant">Fun</span>Maker-<span class="number">5</span>:~ <span class="literal">root</span><span class="comment"># ls -l /sbin/launchd</span>
-r-xr-xr-x <span class="number">1</span> <span class="literal">root</span> wheel <span class="number">154736</span> <span class="constant">Nov</span>  <span class="number">8</span>  <span class="number">2013</span> /sbin/launchd
</code></pre></li>
</ol>
<h2 id="第二部分_组成">第二部分 组成</h2><p>正如在《iOS应用逆向工程》一书中提到的那样，后台进程包括两个部分，一个可执行的二进制文件和一个配置plist配置文件。下面，让我们利用Theos来创建一个可执行二进制文件：</p>
<pre><code><span class="atom">snakeninnys</span>-<span class="name">MacBook</span>:<span class="name">Code</span> <span class="atom">snakeninny</span>$ /<span class="atom">opt</span>/<span class="atom">theos</span>/<span class="atom">bin</span>/<span class="atom">nic</span>.<span class="atom">pl</span>
<span class="name">NIC</span> <span class="number">2.0</span> - <span class="name">New</span> <span class="name">Instance</span> <span class="name">Creator</span>
------------------------------
  [<span class="number">1.</span>] <span class="atom">iphone</span>/<span class="atom">application</span>
  [<span class="number">2.</span>] <span class="atom">iphone</span>/<span class="atom">cydget</span>
  [<span class="number">3.</span>] <span class="atom">iphone</span>/<span class="atom">framework</span>
  [<span class="number">4.</span>] <span class="atom">iphone</span>/<span class="atom">library</span>
  [<span class="number">5.</span>] <span class="atom">iphone</span>/<span class="atom">notification_center_widget</span>
  [<span class="number">6.</span>] <span class="atom">iphone</span>/<span class="atom">preference_bundle</span>
  [<span class="number">7.</span>] <span class="atom">iphone</span>/<span class="atom">sbsettingstoggle</span>
  [<span class="number">8.</span>] <span class="atom">iphone</span>/<span class="atom">tool</span>
  [<span class="number">9.</span>] <span class="atom">iphone</span>/<span class="atom">tweak</span>
  [<span class="number">10.</span>] <span class="atom">iphone</span>/<span class="atom">xpc_service</span>
<span class="name">Choose</span> <span class="atom">a</span> <span class="name">Template</span> (<span class="atom">required</span>): <span class="number">8</span>
<span class="name">Project</span> <span class="name">Name</span> (<span class="atom">required</span>): <span class="atom">rootdaemond</span>
<span class="name">Package</span> <span class="name">Name</span> [<span class="atom">com</span>.<span class="atom">yourcompany</span>.<span class="atom">rootdaemond</span>]: <span class="atom">com</span>.<span class="atom">iosre</span>.<span class="atom">rootdaemond</span>
<span class="name">Author</span>/<span class="name">Maintainer</span> <span class="name">Name</span> [<span class="atom">snakeninny</span>]: <span class="atom">snakeninny</span>
<span class="name">Instantiating</span> <span class="atom">iphone</span>/<span class="atom">tool</span> <span class="atom">in</span> <span class="atom">rootdaemond</span>/...
<span class="name">Done</span>.
</code></pre><p>然后修改main.mm文件的内容：</p>
<pre><code><span class="keyword">static</span> <span class="keyword">void</span> Reboot(<span class="built_in">CFNotificationCenterRef</span> center, <span class="keyword">void</span> *observer, <span class="built_in">CFStringRef</span> name, <span class="keyword">const</span>     <span class="keyword">void</span> *object, <span class="built_in">CFDictionaryRef</span> userInfo)
{
        <span class="built_in">NSLog</span>(<span class="string">@"iOSRE: reboot"</span>);
        system(<span class="string">"reboot"</span>);
}

<span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)
{
        <span class="built_in">NSLog</span>(<span class="string">@"iOSRE: rootdaemond is launched!"</span>);
        <span class="built_in">CFNotificationCenterAddObserver</span>(<span class="built_in">CFNotificationCenterGetDarwinNotifyCenter</span>(), <span class="literal">NULL</span>, Reboot, <span class="built_in">CFSTR</span>(<span class="string">"com.iosre.rootdaemon.reboot"</span>), <span class="literal">NULL</span>,     <span class="built_in">CFNotificationSuspensionBehaviorCoalesce</span>);
        <span class="built_in">CFRunLoopRun</span>(); <span class="comment">// keep it running in background</span>
        <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre><p>现在，让我们处理配置文件。以“com.iosre.rootdaemond.plist”为文件名新建文件，然后将下面的代码写入文件中：</p>
<pre><code><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="doctype">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/    PropertyList-1.0.dtd"&gt;</span>
<span class="tag">&lt;<span class="title">plist</span> <span class="attribute">version</span>=<span class="value">"1.0"</span>&gt;</span>
<span class="tag">&lt;<span class="title">dict</span>&gt;</span>
        <span class="tag">&lt;<span class="title">key</span>&gt;</span>KeepAlive<span class="tag">&lt;/<span class="title">key</span>&gt;</span>
        <span class="tag">&lt;<span class="title">true</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="title">key</span>&gt;</span>
        <span class="tag">&lt;<span class="title">string</span>&gt;</span>com.iosre.rootdaemond<span class="tag">&lt;/<span class="title">string</span>&gt;</span>
        <span class="tag">&lt;<span class="title">key</span>&gt;</span>Program<span class="tag">&lt;/<span class="title">key</span>&gt;</span>
        <span class="tag">&lt;<span class="title">string</span>&gt;</span>/usr/bin/rootdaemond<span class="tag">&lt;/<span class="title">string</span>&gt;</span>
        <span class="tag">&lt;<span class="title">key</span>&gt;</span>RunAtLoad<span class="tag">&lt;/<span class="title">key</span>&gt;</span>
        <span class="tag">&lt;<span class="title">true</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">dict</span>&gt;</span>
<span class="tag">&lt;/<span class="title">plist</span>&gt;</span>
</code></pre><p>在这些键值对当中，<code>Label</code>键对应的是一个可以唯一标示你的后台进程的字符串，<code>Program</code>键对应的是可执行文件所在位置的绝对路径，这两个都是必填的。如果你的后台进程还有其他的参数，那么只需要在文件中增加类似下面这样的键值对即可：</p>
<pre><code><span class="tag">&lt;<span class="title">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="title">key</span>&gt;</span>
    <span class="tag">&lt;<span class="title">array</span>&gt;</span>
        <span class="tag">&lt;<span class="title">string</span>&gt;</span>arg1<span class="tag">&lt;/<span class="title">string</span>&gt;</span>
        <span class="tag">&lt;<span class="title">string</span>&gt;</span>arg2<span class="tag">&lt;/<span class="title">string</span>&gt;</span>
        <span class="tag">&lt;<span class="title">string</span>&gt;</span>more args...<span class="tag">&lt;/<span class="title">string</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">array</span>&gt;</span>
</code></pre><p>在完成了这些之后，我们把这个配置文件保存在项目根目录下的/layout/Library/System/文件夹中。现在，我们的项目树看上去是这个样子的：</p>
<p><img src="http://7xikui.com1.z0.glb.clouddn.com/2014-08-06-rootdaemon2.png-blogpic" alt="image"></p>
<p>执行<code>make package</code>命令，然后检查deb所属的用户：</p>
<pre><code>snakeninnys-<span class="string">MacBook:</span>rootdaemond snakeninny$ dpkg-deb -c <span class="regexp">/Users/</span>snakeninny<span class="regexp">/Code/</span>    rootdaemond/com.iosre.rootdaemond_1.0-<span class="number">1</span>_iphoneos-arm.deb 
drwxr-xr-x snakeninny<span class="regexp">/staff  0 2014-05-11 15:52 ./</span>
drwxr-xr-x snakeninny<span class="regexp">/staff  0 2014-05-11 14:45 ./</span>Library/
drwxr-xr-x snakeninny<span class="regexp">/staff  0 2014-05-11 15:48 ./</span>Library<span class="regexp">/LaunchDaemons/</span>
-rwxr-xr-x snakeninny<span class="regexp">/staff 367 2014-05-11 15:37 ./</span>Library<span class="regexp">/LaunchDaemons/</span>    com.iosre.rootdaemond.plist
drwxr-xr-x snakeninny<span class="regexp">/staff   0 2014-05-11 15:52 ./</span>usr/
drwxr-xr-x snakeninny<span class="regexp">/staff   0 2014-05-11 15:52 ./</span>usr<span class="regexp">/bin/</span>
-rwxr-xr-x snakeninny<span class="regexp">/staff 197984 2014-05-11 15:52 ./</span>usr<span class="regexp">/bin/</span>rootdaemond
</code></pre><p>可以看到，deb中的所有文件都是属于snakeninny:staff的。还记得在第一部分中提到，后台进程必须属于root用户吗？所以，这个后台进程所属的用户不对，当你运行时将会报错。</p>
<p>这是为什么呢？因为这个deb文件是在OSX上打包的，所以它所属的用户就是snakeninny。为了将它的所属用户改为root:wheel，我们需要一个叫做<a href="https://github.com/DHowett/fauxsu" target="_blank" rel="external">fauxsu</a>的工具。下载这个工具，将解压得到的fauxsu和libfauxsu.dylib复制到<code>$THEOS/bin/</code> 目录下，然后运行<code>chmod a+x</code>。重新打包检查一次：</p>
<pre><code>snakeninnys-<span class="string">MacBook:</span>rootdaemond snakeninny$ dpkg-deb -c <span class="regexp">/Users/</span>snakeninny<span class="regexp">/Code/</span>    rootdaemond/com.iosre.rootdaemond_1.0-<span class="number">2</span>_iphoneos-arm.deb 
drwxr-xr-x root<span class="regexp">/wheel        0 2014-05-11 16:05 ./</span>
drwxr-xr-x root<span class="regexp">/wheel        0 2014-05-11 14:45 ./</span>Library/
drwxr-xr-x root<span class="regexp">/wheel        0 2014-05-11 15:48 ./</span>Library<span class="regexp">/LaunchDaemons/</span>
-rwxr-xr-x root<span class="regexp">/wheel      367 2014-05-11 15:37 ./</span>Library<span class="regexp">/LaunchDaemons/</span>    com.iosre.rootdaemond.plist
drwxr-xr-x root<span class="regexp">/wheel        0 2014-05-11 16:05 ./</span>usr/
drwxr-xr-x root<span class="regexp">/wheel        0 2014-05-11 16:05 ./</span>usr<span class="regexp">/bin/</span>
-rwxr-xr-x root<span class="regexp">/wheel   197984 2014-05-11 16:05 ./</span>usr<span class="regexp">/bin/</span>rootdaemond
</code></pre><p>现在，文件所属用户是正确的了。执行<code>make install</code>来安装这个后台进程：</p>
<pre><code>snakeninnys-MacBook:rootdaemond snakeninny$ make install
install<span class="class">.exec</span> <span class="string">"cat &gt; /tmp/_theos_install.deb; dpkg -i /tmp/_theos_install.deb &amp;&amp; rm /tmp/    _theos_install.deb"</span> &lt; <span class="string">"./com.iosre.rootdaemond_1.0-2_iphoneos-arm.deb"</span>
Selecting previously deselected package com<span class="class">.iosre</span><span class="class">.rootdaemond</span>.
(Reading database ... <span class="number">2589</span> files and directories currently installed.)
Unpacking com<span class="class">.iosre</span><span class="class">.rootdaemond</span> (from /tmp/_theos_install.deb) ...
Setting up com<span class="class">.iosre</span><span class="class">.rootdaemond</span> (<span class="number">1.0</span>-<span class="number">2</span>) ...
</code></pre><h2 id="第三部分_测试">第三部分 测试</h2><p>重启手机检查后台进程是否启动：</p>
<pre><code><span class="constant">FunMaker</span>-<span class="number">5</span><span class="symbol">:~</span> root<span class="comment"># reboot</span>
<span class="constant">FunMaker</span>-<span class="number">5</span><span class="symbol">:~</span> root<span class="comment"># Connection to 192.168.1.101 closed by remote host.</span>
<span class="constant">Connection</span> to <span class="number">192.168</span>.<span class="number">1.101</span> closed.
snakeninnys-<span class="constant">MacBook</span><span class="symbol">:Code</span> snakeninny<span class="variable">$ </span>ssh root<span class="variable">@192</span>.<span class="number">168.1</span>.<span class="number">101</span>
<span class="constant">FunMaker</span>-<span class="number">5</span><span class="symbol">:~</span> root<span class="comment"># grep iOSRE /var/log/syslog</span>
<span class="constant">May</span> <span class="number">11</span> <span class="number">16</span><span class="symbol">:</span><span class="number">14</span><span class="symbol">:</span><span class="number">01</span> <span class="constant">FunMaker</span>-<span class="number">5</span> rootdaemond[<span class="number">20</span>]<span class="symbol">:</span> <span class="symbol">iOSRE:</span> rootdaemond is launched!
<span class="constant">FunMaker</span>-<span class="number">5</span><span class="symbol">:~</span> root<span class="comment"># ps -e | grep rootdaemond</span>
   <span class="number">20</span> ??         <span class="number">0</span><span class="symbol">:</span><span class="number">00</span>.<span class="number">13</span> /usr/bin/rootdaemond
  <span class="number">370</span> ttys00<span class="number">0</span>    <span class="number">0</span><span class="symbol">:</span><span class="number">00</span>.<span class="number">01</span> grep rootdaemond
<span class="constant">FunMaker</span>-<span class="number">5</span><span class="symbol">:~</span> root<span class="comment">#</span>
</code></pre><p>我们可以看到，rootdaemond开机自动启动，并且保持在后台运行。最后，我们检查一下它是否在像预期的那样运行：</p>
<pre><code><span class="comment">// compile: clang -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS7.0.sdk -o iOSRERootDaemonTester -arch armv7 /Users/snakeninny/main.mm</span>

<span class="preprocessor">#<span class="keyword">include</span> &lt;notify.h&gt;</span>

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span>
</span>{
        notify_post(<span class="string">"com.iosre.rootdaemon.reboot"</span>);
        <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre><p>用scp命令将iOSRERootDaemonTester复制到iOS上，然后运行：</p>
<pre><code>snakeninnys-<span class="constant">MacBook</span><span class="symbol">:~</span> snakeninny<span class="variable">$ </span>scp iOSRERootDaemonTester root<span class="variable">@192</span>.<span class="number">168.1</span>.<span class="number">101</span><span class="symbol">:/var/tmp/</span>
iOSRERootDaemonTester                         <span class="number">100</span>%   <span class="number">48</span>KB  <span class="number">48.3</span>KB/s   <span class="number">00</span><span class="symbol">:</span><span class="number">00</span>    
<span class="constant">FunMaker</span>-<span class="number">5</span><span class="symbol">:~</span> root<span class="comment"># /var/tmp/iOSRERootDaemonTester</span>
<span class="constant">FunMaker</span>-<span class="number">5</span><span class="symbol">:~</span> root<span class="comment"># Connection to 192.168.1.101 closed by remote host.</span>
<span class="constant">Connection</span> to <span class="number">192.168</span>.<span class="number">1.101</span> closed.
snakeninnys-<span class="constant">MacBook</span><span class="symbol">:Code</span> snakeninny<span class="variable">$ </span>ssh root<span class="variable">@192</span>.<span class="number">168.1</span>.<span class="number">101</span>
<span class="constant">FunMaker</span>-<span class="number">5</span><span class="symbol">:~</span> root<span class="comment"># grep iOSRE /var/log/syslog</span>
<span class="constant">May</span> <span class="number">11</span> <span class="number">16</span><span class="symbol">:</span><span class="number">36</span><span class="symbol">:</span><span class="number">01</span> <span class="constant">FunMaker</span>-<span class="number">5</span> rootdaemond[<span class="number">20</span>]<span class="symbol">:</span> <span class="symbol">iOSRE:</span> reboot
<span class="constant">May</span> <span class="number">11</span> <span class="number">16</span><span class="symbol">:</span><span class="number">36</span><span class="symbol">:</span><span class="number">58</span> <span class="constant">FunMaker</span>-<span class="number">5</span> rootdaemond[<span class="number">20</span>]<span class="symbol">:</span> <span class="symbol">iOSRE:</span> rootdaemond is launched!
<span class="constant">FunMaker</span>-<span class="number">5</span><span class="symbol">:~</span> root<span class="comment">#</span>
</code></pre><p>它神奇的运行了。</p>
<h2 id="第四部分_结论">第四部分 结论</h2><p>事实上，在iOS或者OSX上，后台进程和代理程序远比这篇文章中描述的要复杂的多。我强烈建议大家看一下下面相关的文章。再次强调，后台进程是一个强大的工具，但它是一把双刃剑，在你决定使用它之前，你最好非常了解自己接下来将要做什么，然后小心的使用它。谢谢阅读。</p>
<p>相关阅读：</p>
<ol>
<li><a href="http://en.wikipedia.org/wiki/Daemon_(computing" target="_blank" rel="external">http://en.wikipedia.org/wiki/Daemon_(computing</a>)</li>
<li><a href="https://www.chrisalvares.com/blog/7/creating-an-iphone-daemon-part-1/" target="_blank" rel="external">https://www.chrisalvares.com/blog/7/creating-an-iphone-daemon-part-1/</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/launchctl.1.html" target="_blank" rel="external">https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/launchctl.1.html</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html" target="_blank" rel="external">https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/Manpages/man5/launchd.plist.5.html" target="_blank" rel="external">https://developer.apple.com/library/mac/documentation/Darwin/Reference/Manpages/man5/launchd.plist.5.html</a></li>
</ol>
<p>2014.5.22注：<br>com.iosre.rootdaemond.plist文件必须拥有644权限，否则示例后台进程将不会运行。</p>
]]></content>
    <summary type="html">
    <![CDATA[翻译《Run a daemon (as root) on iOS》]]>
    
    </summary>
    
      <category term="System Security" scheme="http://cubernet.cn/blog/tags/System-Security/"/>
    
      <category term="Theos" scheme="http://cubernet.cn/blog/tags/Theos/"/>
    
      <category term="daemon" scheme="http://cubernet.cn/blog/tags/daemon/"/>
    
      <category term="iOS" scheme="http://cubernet.cn/blog/tags/iOS/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Theos介绍]]></title>
    <link href="http://cubernet.cn/blog/theos1/"/>
    <id>http://cubernet.cn/blog/theos1/</id>
    <published>2014-08-04T16:39:16.000Z</published>
    <updated>2015-04-29T17:56:04.000Z</updated>
    <content type="html"><![CDATA[<p>最近由于工作原因，需要了解iOS越狱开发相关的一些技术。之前虽然有接触过iOS开发，不过都是基于苹果公开的API，相对于越狱开发还是一头雾水。于是打开Google，开始找寻我需要的资料。经过一段时间的查阅，发现iOS越狱开发相关的资料实在太少，并且比较杂乱，甚至即使在安装时遇到的问题都要花费很长的时间去搜索解决办法。虽说现在项目已经接近尾声，当初的很多步骤细节已经记得不清楚，不过我还是尽力回顾整理一下，对自己来说是一种知识的巩固，或许还能帮上别人的一点小忙。</p>
<a id="more"></a>
<h2 id="开发环境">开发环境</h2><p>首先，要开启一段iOS越狱开发之旅的你，最好有一定的Objective-C基础，Objective-C是苹果开发的唯一官方语言，虽说越狱开发也可以采用Lua语言开发的Wax框架，但我相信了解Objective-C总归不是一件坏事。</p>
<p>其次，如果你有一台Mac，那么基本的开发环境以及iOS的SDK都会随着XCode的安装而解决。如果你是一位Linux上的geek，那么你只需要运行这段脚本【<a href="http://https://gist.github.com/kirb/2353599" target="_blank" rel="external">点击下载</a>】，就可以安装Toolchain和Theos来完成基本开发环境的搭建。如果你是Windows的fans，那……暂时我还没找到解决办法。</p>
<p>由于我是在Mac上进行的开发，所以下面的内容都是默认在Mac上。</p>
<h2 id="常用框架">常用框架</h2><p>iOS越狱开发常用的框架有两个，一个是Theos；</p>
<blockquote>
<p>Theos is a cross-platform suite of development tools for managing, developing, and deploying iOS software without the use of Xcode.——iphonedevwiki</p>
<p>Theos是一个跨平台的开发工具套件，用于在没有Xcode的情况下管理、开发、部署iOS软件。——iphonedevwiki</p>
</blockquote>
<p>另外一个是iOSOpenDev。</p>
<blockquote>
<p>iOSOpenDev is an open-source project that sets up the iOS SDK to allow open development in Xcode of jailbreak-type projects not supported nor allowed by default and provides Xcode templates for building common jailbreak-type projects and the various tools needed for such development.——iphonedevwiki</p>
<p>iOSOpenDev是一个开源项目，它使开发者可以在Xcode中开发默认情况下不支持的越狱项目，并且提供越狱开发中需要的模板和工具。——iphonedevwiki</p>
</blockquote>
<p>以上是这两款工具在iphonedevwiki中给出的解释以及我个人的翻译。简单点说，采用Theos开发时需要自己管理makefile文件等，界面没有在Xcode中友好；iOSOpenDev则是基于Xcode创建模板和编译打包，对于不熟悉makefile的同学可能更倾向使用它。不过我本人更喜欢Theos，感觉更高效直观，而且在安装iOSOpenDev时遇到一系列未知错误，好像是和OS X及Xcode的版本相关，所以一直在用Theos，虽然我也不熟悉makefile，活到老学到老嘛：）。</p>
<h2 id="Theos安装及使用">Theos安装及使用</h2><p>说了这么多，下面开始看下Theos的安装及使用。</p>
<p>从Theos的库中下载框架到本地：</p>
<pre><code>git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/DHowett/theos /<span class="keyword">opt</span>/theos
</code></pre><p>你可以将其保存在本地的任何位置，不过推荐使用默认的/opt/theos。</p>
<p>除此之外，你还需要安装<code>ldid</code>和<code>dpkg</code>，这两个工具是签名和打包时必须的。推荐通过Macports安装dpkg：</p>
<pre><code>sudo port <span class="keyword">install</span> dkpg
</code></pre><p>默认的Theos中，很多苹果私有的头文件都没有包含在下载包中，这时推荐下载rpetrich已经打包好的头文件库（当然也可以用class-dump自己去获取），下载好解压在<code>$THEOS/include</code>文件夹下即可。<a href="https://github.com/rpetrich/iphoneheaders" target="_blank" rel="external">点击下载</a></p>
<p>这时就可以开始我们的第一个Theos应用了。</p>
<ul>
<li><p>设置环境变量：</p>
<pre><code><span class="keyword">export</span> THEOS=<span class="regexp">/opt/</span>theos
</code></pre></li>
<li><p>进入存放项目的文件夹下，创建示例工程：</p>
<pre><code><span class="label">$THEOS</span>/bin/nic.<span class="keyword">pl</span>
</code></pre></li>
<li><p>这时需要我们选择使用哪种模板：</p>
<pre><code><span class="type">application</span><span class="comment">--&gt; 普通的应用程序</span>
library<span class="comment">--&gt;库文件</span>
preference_bundle<span class="comment">--&gt;设置束</span>
tool <span class="comment">--&gt;后台程序</span>
tweak<span class="comment">--&gt;外挂程序</span>
</code></pre></li>
<li><p>之后输入工程名、包名等参数即可完成初始化工作。</p>
</li>
<li>网上有很多tweak程序的helloworld版本，即在开机时弹出一个框，显示helloworld，大家可以google一下。</li>
<li>在编码完成之后就可以编译打包然后安装到手机上测试了。</li>
<li><p>如果你的测试iPhone上安装了ssh，那么只需要在makefile或者系统变量中添加THEOS_DEVICE_IP=192.168.x.xxx（你的IP），然后执行下面这条命令就可以自动完成编译、打包、安装了：</p>
<pre><code><span class="built_in">make</span> <span class="keyword">package</span> install
</code></pre></li>
</ul>
<p>这时会提示你输入ssh密码，默认的密码是<code>alpine</code>。</p>
<p>Theos默认的要求非常严格，经常会因为warning而报错，无法安装测试。这时在makefile头部添加’GO_EASY_ON_ME=1’即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[iOS越狱开发]]>
    
    </summary>
    
      <category term="System Security" scheme="http://cubernet.cn/blog/tags/System-Security/"/>
    
      <category term="Theos" scheme="http://cubernet.cn/blog/tags/Theos/"/>
    
      <category term="iOS" scheme="http://cubernet.cn/blog/tags/iOS/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[博客再次更换主题]]></title>
    <link href="http://cubernet.cn/blog/another-new-theme/"/>
    <id>http://cubernet.cn/blog/another-new-theme/</id>
    <published>2014-08-02T16:39:16.000Z</published>
    <updated>2015-05-04T14:52:19.000Z</updated>
    <content type="html"><![CDATA[<p>无意中看到<a href="http://esoftmobile.com" target="_blank" rel="external">esoftmobile</a>的博客，对他的博客主题有种一见钟情的感觉，可惜到github上一看源码才发现，原来esoftmobile是基于node.js来实现的那套主题。由于实在喜爱，虽夜已深，但决定模仿那个主题，自己操刀仿一个过来。</p>
<a id="more"></a>
<p>说干就干。由于之前自己亲手做过一个主题，所以对jekyll的这一套东西已经比较熟悉，噼里啪啦在键盘上乱敲了一顿之后，cmd+R，我看着屏幕笑了笑，已经达到我预期的效果了。</p>
<p>这时再抬起头，发现不知道什么时候已然天亮。</p>
<p>手上的bong开始震动，提醒我该起床了。=_=</p>
<p>这套模板在模仿esoftmobile主题的基础上又做了些许的修改，如果有喜欢之前那套主题的同学(样式见这篇<a href="http://cubernet.github.io/new-theme/" target="_blank" rel="external">博文</a>的截图)可以从github上下载我博客源码，用_layout目录下标注<code>备份</code>的文件替换在用的文件即可。这个主题做的修改大概包括：</p>
<ul>
<li>在色调和布局上较之前做了很大改动；</li>
<li>增加了首页<code>显示更多</code>功能；</li>
<li>去掉了博文目录的悬浮导航；</li>
<li>保留了背景音乐播放器，如果有背景音乐的文章，在文章题目下有背景音乐<code>PLAY</code>字样，点击可播放；</li>
<li>增加了对<code>友言</code>评论插件的支持，在设置中可以切换选择使用’友言’或<code>多说</code>或<code>disqus</code>；</li>
<li>去掉了<code>分享</code>按钮；</li>
<li>访问统计由<code>百度统计</code>改为<code>gostats</code>(不过访问统计被清零了，好伤心T T)；</li>
</ul>
<hr>
<p>8月7日更新：</p>
<ul>
<li>增加了洋葱头表情 <img src="http://cubernet.cn/assets/smilies/10.gif" id="smiley"></li>
<li>to be continued…💪💪💪</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[给自己的博客写了一个新主题]]>
    
    </summary>
    
      <category term="博客主题" scheme="http://cubernet.cn/blog/tags/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[时光不老，我们不散]]></title>
    <link href="http://cubernet.cn/blog/bieli/"/>
    <id>http://cubernet.cn/blog/bieli/</id>
    <published>2014-07-27T16:39:16.000Z</published>
    <updated>2015-05-04T14:52:41.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>人生浪急滩险<br>走来不易<br>最后值得珍重的<br>不过是你我的情义</p>
<p>——祝小兔</p>
</blockquote>
<p>这篇文章本来是<a href="http://cubernet.github.io/libie" target="_blank" rel="external">离别</a>的姊妹篇，从url链接中也看的出来，原准备的名字叫<code>别离</code>。当初觉得，毕业了，有聚有散，有人离开，也有人归来。相同的两个字，次序不同，意义竟也不同。<a id="more"></a>    </p>
<p>某人<img src="http://cubernet.cn/assets/smilies/14.gif" id="smiley">当时看了文章后问我，为什么没有提及她。其实，那些没有被提及的，不是因为在我本科的四年生活中毫无分量，而是因为，你们不在我离别的<code>队列</code>里。<img src="http://cubernet.cn/assets/smilies/32.gif" id="smiley">好吧，我承认程序猿的本质被我暴露了。</p>
<p>后来想想，别离或许不能准确表达我内心的想法，所以将题目改成现在的这个。【背景音乐也非常的切题 :) 】</p>
<hr>
<p>这个暑假没有回家，于是也亲身经历了一把“辞旧迎新”的感觉。整个夏天校园里都时不时会有家长出现，最初是来参加孩子毕业典礼的家长，后来是带孩子提前来熟悉校园的家长。食堂一如既往的开始翻修。Oh，不，准确的说是食堂外围开始翻修，这样新生到来时，不至于输在第一印象上。那条黑色的狗依然每天在主楼前面乘凉，而我们的生活却一直没有止步。</p>
<hr>
<p>肉肉同学结束了一个月的博士楼生活，搬进了单位的职工宿舍。不舍的情绪就像空气一样弥漫在身边，但似乎又不容易那么被发现。刚搬走的那几天，只是突然的不想说话。晚上开门回去，总下意识地觉得进错了家。那声“你回来啦”，听不到了。</p>
<p>不舍却也欣慰。</p>
<p>因为我终于看到她在这片现在还既不属于我更不属于她的土地上，重新有了自己的朋友圈，有了自己的工作，有了自己的轨迹。在那些被爱情滋润不到的地方，这一次，重新被填满了。</p>
<p>除了欣慰，更多的是感动。</p>
<p>前几天在空间里看到羊蛋和小波快结婚了。很替他们高兴。我只想说，我想回去参加你们的婚礼。这样的婚姻是被祝福的。正如肉肉一无反顾的来到成都，对我来说，不仅仅是感动，更是一种钦佩，或者，更是一种责任。</p>
<p>这种责任不是拿来在类似于父亲节给叔叔发的短信里一样用来口头承诺的。我更愿意用行动去证明。</p>
<p>当然啦，平淡的生活总归需要一些小矛盾来调节一下。有时候双方实在找不到什么毛病，就会因为一些党派立场、民族大义的问题产生争执。这个时候，争执的内容和结果早已不重要，安心“享受”过程。<img src="http://cubernet.cn/assets/smilies/28.gif" id="smiley"></p>
<p>哈哈，开玩笑啦。毕竟和谐社会，还是和谐点好。</p>
<p>总之，很幸运能遇到一个愿意付出这么多也这么优秀的你，可能所有程序猿的共同特点的都是嘴笨心细，很多话很多事都一直呆呆的藏在心里。我们一起吃遍成都的大街小巷，一起体验生活中的各种点点滴滴。</p>
<p>爷爷在短信里说，你们会很幸福。<img src="http://cubernet.cn/assets/smilies/1.gif" id="smiley"></p>
<p>我也这么觉得。</p>
<hr>
<p>记得肉肉同学去参加同事聚会的那天晚上，无意打开微信刷新一下，看见阿姨十二点半还在更新状态。</p>
<p>可怜天下父母心啊。</p>
<p>因为今年暑假没回去，爸爸妈妈决定过来找我。</p>
<p>想想我一年轻汉子在屋里吹空调，让两位长辈不远千里过来看我，心里还是有一种说不出来的滋味。</p>
<p>不仅仅是激动和开心。</p>
<p>不知出于何种目的<img src="http://cubernet.cn/assets/smilies/30.gif" id="smiley">，也不知是经过何种途径<img src="http://cubernet.cn/assets/smilies/23.gif" id="smiley">，更不知是因为哪次比赛<img src="http://cubernet.cn/assets/smilies/32.gif" id="smiley">，毕业之后，家里莫名收到学校发来祝贺我信安大赛获奖的喜报。</p>
<p>当然，这里想说的重点是，爸爸在空间里发的一段话。</p>
<p>也许还是在谈高考的事情？说实话我也就是在当时知道成绩的那几天郁闷了一下，很快就坦然了。感觉当年高中的成绩就好像现在的房价，虽然虚高不下，但终归有遭不住的一天，回归到本来的面目。电子科大是我很好的选择，这也是为什么四年后我再次选择它的原因。</p>
<p>这里很适合我。</p>
<p>我很喜欢这里。</p>
<p>亦或是因为在我身上的期望太大了？那就待我负重远行一万里，让你们扬眉吐气。</p>
<hr>
<p>最近一直处于一种焦躁的忙碌中。所谓忙碌，是因为觉得自己有很多事情要做。而所谓焦躁，是因为自己不知道该不该去做。</p>
<p>最终还是在没有任何老师或者学长的指导下，凭自己的判断和喜好定了博士期间的方向。定之前的那几天想了很多，经常一整个晚上一整个晚上的处于写代码、看书、思考的循环中，一不小心就天亮了，然后抱着地主头眯上一会儿，起来去实验室。我给自己选择了一个别人眼中最痛苦的方向，也不知道自己能不能坚持下去。跟很多人聊天，大家都说这个方向可能根本就没什么论文可发。</p>
<p>但，这又怎样呢？</p>
<p>我还是义无返顾的选择了。</p>
<p>另外两位小伙伴的加入给了我信心，我也相信我自己可以坚持。</p>
<p>今天中午碰巧和陈博士一起吃饭。</p>
<p>路上我问，博士，你这么优秀的秘诀是什么？</p>
<p>他说，找准一个方向，然后猛操，不要想太多。</p>
<p>那一刻，觉得暗淡了这么久的天，</p>
<p>晴了。</p>
<p>我想，我等的，就是这么一句话。</p>
<p>我想，等我的，也是这么一句话。</p>
<p><img src="http://cubernet.cn/assets/smilies/12.gif" id="smiley"></p>
]]></content>
    <summary type="html">
    <![CDATA[本科毕业前的感言]]>
    
    </summary>
    
      <category term="life" scheme="http://cubernet.cn/blog/tags/life/"/>
    
      <category term="生活归档" scheme="http://cubernet.cn/blog/categories/%E7%94%9F%E6%B4%BB%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[离别]]></title>
    <link href="http://cubernet.cn/blog/libie/"/>
    <id>http://cubernet.cn/blog/libie/</id>
    <published>2014-06-27T16:39:16.000Z</published>
    <updated>2015-05-04T14:50:58.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>华灯再上，离别的已是自己。 ——Cubernet</p>
</blockquote>
<p>一觉醒来就要去参加毕业典礼，心里有种莫名的感觉，总觉得这一切来的有点始料未及，呵，我就要毕业了。</p>
<a id="more"></a>
<p>其实一路走来，毕业早已不是第一次经历的事情。小学、初中、高中，每一个阶段都有毕业，或隆重或平常，它们都标志着一段旧生活的结束和另一段新生活的开始。</p>
<p>只是人都是安于现状的。所以我们疯狂的留念，疯狂的纪念。其实，我们不是害怕忘记彼此，而是害怕失去自己曾经拥有的那些过去。</p>
<p>我也是害怕离别的。</p>
<p>因为离别当头，总是会有止不住的过往回忆。</p>
<hr>
<h2 id="回忆篇">回忆篇</h2><p>四年前，迎新的校车把我从火车站接到了学校，下车的第一眼看到的是学生活动中心，不知为何，当时给了我极差的第一印象。第一个晚上一个人睡在寝室里，满脑子想的都是要不回去补习吧，明年换个学校。。。不过后来一想，既来之则安之，时间久了说不定会慢慢发现它的好。果然现在觉得它其实还不错。是的，我现在觉得<code>电子科技大学</code>还不错，虽然它依旧听起来像个专科。</p>
<p>可能天生不是做学生活动的料，从最初不愿参加任何学生会的面试，到最后勉强加入分团委，事后觉得，大一一年的学生工作给我带来的可能更多是教训和反思，也使我慢慢认识到，原来我对官场上那一套“做法”有多么的深恶痛绝，我不想让自己太早沾染上那些腔调，于是果断急流勇退。（PS，我觉得雷*在任时的分团委还是很温馨的，虽然他抱怨当时水，其实挺好的啦）</p>
<p>当然，更多的时间是疯狂的加入各种社团，加入各种工作室、俱乐部，发传单、搞活动，每天生活充实到不行。如果现在要我用四个字来概括那个时候的话，那就是</p>
<p><code>一事无成</code>。</p>
<p>好在至少醒悟了一点，那就是，学长都是骗人的。</p>
<p>同我一起考来成都的，还有刘靖跟宝铁。虽然不在同一个学校，好在离得不远，所以每隔一段时间就出来聚聚，聊聊伤心事，再吹吹牛皮。一不小心就这么四年过去了，刘靖要去香港，还真是有点舍不得。</p>
<p>大三的时候王凯大鹏他们十几个人赶来成都过中秋，刚好又对上王凯生日。十几个人就那么在路边摊一直喝啊喝啊，一直到冰洁都喝成一滩烂泥了。那段回忆真是美好啊，不知道以后还有没有这样的机会了。</p>
<p>其实我这四年几乎没怎么在成都玩过，也没吃过多少正宗的成都美食，可能是见的少，所以就只能对铁板烧烤铁板炒饭情有独钟。这方面，我相信逼哥跟我有同感。</p>
<p>逼哥跟我军训时就站在一起，那个时候还不知道我俩是老乡，没想到后来竟在一间屋子里睡了三年，说了那么多交心交肺的话。当然，绝大多数都是在<code>旺角烧烤</code>。说好的走之前再去喝一顿呢，你趁我在北京竟然发只发了条微信就回山西了。不过我想到以后可能还要靠梁局长罩着，也只能默默的在心里骂句FUCK YOU。</p>
<p>相比之下，铭铭和建行就不太喜欢那个烧烤。带他们去过一次，结果两个人都没吃high。可能是没有旺角烧烤存在的缘故，跟铭铭每天形影不离却一直都是三脚踢不出一个屁，我们两个四年对话的总和可能都没这篇流水账的字数多。但默契还是有的。铭铭走中，那种见死不救崩了怪队友的中；建行打野，那种20分钟裸出一把跳得打野；Peace上单，那种一头扎进对面野区半个小时不出来的上单；我跟路人走下，那种5分钟补5个刀的下。有句话好像是说，网吧五连坐，从来没赢过。我想说，赢不赢都很快乐。以后的日子里可能不再有时间一起dota，但dota已在心里，偶尔看看dota视频，也会想起你们。</p>
<p>刘学不打dota，其实什么游戏都不打，只看电影，什么电影都看。刘学是我见过的最好的老好人，没有之一。突然想起前几天那么晚回去没带钥匙，打电话吵醒你帮我开门，真是抱歉。好人有好报，我一直觉得这话不假。</p>
<p>相反，马哥和超哥真是两个坏透了的人，可劳资还就是喜欢跟你们打交道。毕业旅行和毕业聚餐你们两个各自错过了一场。不过我在不同的地点跟你们两个说了同样的话，不知道酒醒之后你们还记得不。我还是很期待能一起做点事。</p>
<p>说起做点事，毕业旅行的时候跟刚哥喝到凌晨三点半，第一次觉得懂了他，那天说过的那些话，可能这辈子都不会再跟我说了，但我觉得说一次，就已经是朋友，是好朋友了，对不对。</p>
<p>我觉得好朋友就是那种不必一起分享所有的开心，却可以随时陪你分担所有的难过的人。好朋友可能不经常联系，但随叫随到。</p>
<p>可是，高中那一帮人，海龟、三儿、孙鹏、嘉琪、华仔、地主等等，你们他妈的也太久不联系了吧！</p>
<p>对了，去杭州耍的照片我好像一直忘记给你了孙学霸，你以后成大器了，不会就因为这个就不帮我了吧。。。</p>
<p>好像回忆的有些久远了，又好像都是最近的事，脑子乱了，就不去想它了。</p>
<h2 id="感谢篇">感谢篇</h2><p>好像只有那些取得卓越成就的人才有资格说，感谢谁谁谁曾经对我的帮助，才使得我取得今天的成就。</p>
<p>可是我想说，虽然我依旧像四年前一样一事无成，我还是想因一些事对一些人表达一些感谢。</p>
<p>由近及远，最应该感谢的是志瑜兄。虽说直博是个大坑，但没有你，我还真没这个资格去享受这个大坑。我这个人不善于当面在口头上表达一些感谢，当时的一顿饭更不足以代表我的谢意，这么说吧，这个人情，一辈子去还。</p>
<p>再有就是实验室了吧，大一大二在汤老师的实验室，以及后来张老师的实验室，里面的老师、师兄都在各方面给了我极大的帮助。</p>
<p>感谢跟我室友过或者同学过的人，我是个喜欢懒床翘课毛病多的人，感谢你们帮我签到喊我上课替我考试代我买票，没有你们，我一个人走不到今天。</p>
<h2 id="遗憾篇">遗憾篇</h2><p>任何一段时间中，总会有一些遗憾。</p>
<p>比如还是没有完成从一个明显的胖子到不明显的胖子的转型。</p>
<p>比如还是没有养成经常锻炼身体的习惯。</p>
<p>比如没有趁学生价多去游玩几个景区。</p>
<p>比如没有学会说四川话。</p>
<p>比如。。。其实还有很多。</p>
<p>我想说，最遗憾的是，没有遇到一个超级团结的集体，可能是实验班的同学都太过个性鲜明而难以互相融合。不过这不影响国软是<code>邦清班</code>，是一个超牛逼的集体的事实。过程已然如此，我只是希望未来的路上，每一颗星星在忙于闪耀的同时，能牵一牵彼此的手。</p>
<p>当然，遗憾虽有，但不后悔。</p>
<hr>
<p>今天去领博士通知书，老师再三核对照片来确认是否来本人带领，边看边说，“怎么感觉你好小啊，是本人吗？”</p>
<p>我在心中默念，我是还小啊，因为未来的路还长。</p>
]]></content>
    <summary type="html">
    <![CDATA[本科毕业前的感言]]>
    
    </summary>
    
      <category term="life" scheme="http://cubernet.cn/blog/tags/life/"/>
    
      <category term="生活归档" scheme="http://cubernet.cn/blog/categories/%E7%94%9F%E6%B4%BB%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[落电台音乐批量下载]]></title>
    <link href="http://cubernet.cn/blog/luo/"/>
    <id>http://cubernet.cn/blog/luo/</id>
    <published>2014-06-15T16:39:16.000Z</published>
    <updated>2015-05-04T14:53:05.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.luoo.net" target="_blank" rel="external">落电台</a>是我很喜欢的一个电台，也曾经在日志中不止一次的推荐过这个电台。这个网站上的音乐、文字、图片，无一不让我陶醉。</p>
<blockquote>
<p>在本科四年中那段最奋斗最辛苦的日子，<code>落网</code>陪我一路走过。那些清早起来，听着电台开始一天编码的生活，是最充实最美丽的回忆。——感谢<code>落网</code></p>
</blockquote>
<p>可能是太过于喜欢，进而会变的依赖。在许多没有网的时候也希望能够有<code>落网</code>陪伴，于是萌生了将电台音乐下载到本地的想法（只是为了本地播放，希望大家也不要拿来商用）。</p>
<a id="more"></a>
<p>说干就干。</p>
<p>简单看下<code>落网</code>的网站结构，会发现基本格式都是<code>主网址/music/期刊编号</code>，而每一期的歌曲地址则是通过js代码动态加载的。于是一个简单的办法就是，先遍历每一期，然后将js代码动态加载的歌曲地址筛选出来，然后批量下载。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#期刊页面链接生成方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrl</span><span class="params">(num)</span>:</span></span><br><span class="line">    url = <span class="string">'http://www.luoo.net/music/'</span></span><br><span class="line">    <span class="keyword">return</span> url + getNum(num)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readsrc</span><span class="params">(src)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = urllib2.urlopen(src)</span><br><span class="line">        content = url.read()</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'readsrc error'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"><span class="comment">#歌曲详情js代码提取方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSongs</span><span class="params">(content)</span>:</span></span><br><span class="line">    p = re.compile(<span class="string">r'"title":"(?P&lt;title&gt;.*?)","artist":"(?P&lt;artist&gt;.*?)","album":"(?P&lt;album&gt;.*?)","mp3":"(?P&lt;mp3&gt;.*?)"'</span>,re.M)</span><br><span class="line">    r = p.finditer(content)</span><br><span class="line">    <span class="keyword">if</span> r:</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure>
<p>最后增加了提取期刊名并按照期刊号归类，并将其改为命令行工具，使用方法如下：</p>
<pre><code>-------------------------------------------------------------------------------

    This program downloads music from www.luo.net . 
    Options include: 
      --version : Prints the version number 
      --help    : Display this help
      --a       : Download all music from the first vol
      -v<span class="annotation">[&lt;vol number&gt;]</span>      : Download the specified vol
      -r<span class="annotation">[&lt;rank of music&gt;]</span>   : Download the specified music
      -p<span class="annotation">[&lt;filepath&gt;]</span>        : The filepath where <span class="keyword">to</span> save music

---------------------------------------------------------------------------------
</code></pre><p>最终实现效果如下图：</p>
<p><img src="http://7xikui.com1.z0.glb.clouddn.com/2014-06-16-luo-2.png-blogpic" alt="image"></p>
<p>完整源码地址：<a href="https://github.com/Cubernet/luoo" target="_blank" rel="external">点击下载</a>       </p>
]]></content>
    <summary type="html">
    <![CDATA[批量下载落电台www.luoo.net的音乐]]>
    
    </summary>
    
      <category term="Python" scheme="http://cubernet.cn/blog/tags/Python/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[谈编码]]></title>
    <link href="http://cubernet.cn/blog/encode/"/>
    <id>http://cubernet.cn/blog/encode/</id>
    <published>2014-06-14T16:39:16.000Z</published>
    <updated>2015-05-04T14:52:48.000Z</updated>
    <content type="html"><![CDATA[<p>偶然获知阮一峰老师的博客文集上线了，十年（2004-2013）的思想漫游，100篇精华文章，20万字。一直很喜欢阮一峰老师的博客，也从他的博客中学到了很多东西。推荐大家有空去他的博客<a href="http://www.ruanyifeng.com" target="_blank" rel="external">阮一峰的网络日志</a>看看，更推荐大家购买一份电子版文集好好品读，<a href="http://www.ruanyifeng.com/blog/2014/05/my_blog_book.html" target="_blank" rel="external">文集介绍及购买地址</a>。</p>
<a id="more"></a>
<p>下面进入今天的正题，谈谈平时常见的几种编码。</p>
<h2 id="URL编码">URL编码</h2><p>URL只允许使用US-ASCII字符集中的可打印字符。URL编码方案主要用于对扩展ASCII字符集中的任何有问题的字符进行编码，使其可通过HTTP安全传输。任何URL编码的字符都以%为前缀，其后是这个字符的两个十六进制ASCII代码。</p>
<p>当攻击Web应用程序时，如果需要将以下字符当做数据插入HTTP请求中，渗透测试员必须对它们进行URL编码。</p>
<blockquote>
<p>空格  %  ？  &amp;  =  ；  +  #</p>
</blockquote>
<h2 id="Unicode编码">Unicode编码</h2><p>Unicode是一种为支持全世界所使用的各种编写系统而设计的字符编码标准，它采用各种编码方案，其中一些可用于表示Web应用程序中的不常见字符。</p>
<p>16位Unicode编码的工作原理与URL编码类似。为通过HTTP进行传输，16位Unicode编码的字符以%u为前缀，其后是这个字符的十六进行Unicode码点。例如：</p>
<ul>
<li>%u2215代表/；</li>
</ul>
<p>UTF-8是一种长度可变的编码标准，它使用一个或几个字节表示每个字符。为通过HTTP进行传输，UTF-8编码的多字节字符以%为前缀，其后用十六进制表示每个字节。</p>
<p>攻击Web应用程序时，之所以要用到Unicode编码，主要在于有时可用它来破坏输入确认机制。如果输入过滤阻止了某些恶意表达式，但随后处理输入的组件识别Unicode编码，就可以使用各种标准与畸形的Unicode编码避开过滤。</p>
<h2 id="HTML编码">HTML编码</h2><p>HTML编码是一种用于表示问题字符以将其安全并入HTML文档的方案。有许多字符具有特殊的含义，并被用于定义文档结构而非其内容。为了安全使用这些字符，并将其用在文档内容中，就必须对其进行HTML编码。</p>
<p>HTML编码定义了大量HTML实体来表示特殊的字面量字符，例如：</p>
<blockquote>
<ul>
<li><code>&amp;quot;</code>代表<code>&quot;</code>;</li>
<li><code>&amp;lt;</code>代表<code>&lt;</code>;</li>
<li><code>&amp;gt;</code>代表<code>&gt;</code>。</li>
</ul>
</blockquote>
<p>此外，任何字符都可以使用它的十进制ASCII码进行HTML编码，例如：</p>
<blockquote>
<p><code>&amp;#34;</code>代表<code>&quot;</code>；</p>
</blockquote>
<p>或者使用十六进制的ASCII码，例如：</p>
<blockquote>
<p><code>&amp;#x22;</code>代表<code>&quot;</code>；</p>
</blockquote>
<h2 id="Base64编码">Base64编码</h2><p>Base64编码仅用一个可打印的ASCII字符就可以安全转换任何二进制数据，它常用与对电子邮件附件进行编码，使其通过SMTP安全传输。它还可用于在基本HTTP验证机制中对用户证书进行编码。</p>
<p>Base64编码将输入数据转换成3哥字节块。每个块被划分为4段，每段6个数据位。这6个数据位有64种不同的排列组合，因此每个段可使用一组64个字符表示。Base64编码使用以下字符集，其中只包含可打印的ASCII字符：</p>
<blockquote>
<p><strong>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</strong></p>
</blockquote>
<p>如果最后的输入数据块不能构成3段输出数据，就用一个或者两个等号(=)不足输出。</p>
<h2 id="十六进制编码">十六进制编码</h2><p>许多应用程序在传送二进制数据时直接使用十六进制编码，用ASCII字符表示十六进制数据块。</p>
]]></content>
    <summary type="html">
    <![CDATA[谈一谈平时常见的几种编码]]>
    
    </summary>
    
      <category term="编码" scheme="http://cubernet.cn/blog/tags/%E7%BC%96%E7%A0%81/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[给博客添加了自己的主题]]></title>
    <link href="http://cubernet.cn/blog/new-theme/"/>
    <id>http://cubernet.cn/blog/new-theme/</id>
    <published>2014-06-08T16:39:16.000Z</published>
    <updated>2015-04-29T17:57:10.000Z</updated>
    <content type="html"><![CDATA[<p>之前一直使用WP搭建博客，后来觉得WP实在过于庞大，那些高大上的功能对我这样一个<code>手残</code>来说实在是没有用武之地，所以投靠到了Github。</p>
<a id="more"></a>
<p>刚来的时候，花了很长时间在网上寻找博客主题，筛选的条件只有一个，简洁。于是就有了之前的那个主题，那个模板修改自 <a href="http://yonsm.net/" target="_blank" rel="external">Yonsm</a> 的博客，在这里再次表示感谢。 看久之后，总觉得之前的模板更多的只是符合我对简洁的要求，并没有达到简洁美，于是在欢度六一之后，决定亲自写一套模板，只有这样才能最大程度的达到预期的样式效果。</p>
<p>总结一下，这套模板在之前的基础上大概做了以下修改：</p>
<ul>
<li>首先是色调和对比度的修改，增加了黑色元素及背景色深浅过度；</li>
<li>将左侧导航栏修改为浮动，在header中增加了固定的导航栏；</li>
<li>在右侧增加了博文目录的悬浮导航，如果文章较短没有分块，则不显示目录导航；</li>
<li>去掉了之前丑陋的背景音乐播放器，如果有背景音乐的文章，在文章题目下有背景音乐<code>PLAY</code>字样，点击可播放；</li>
<li>增加了对disqus评论插件的支持，在设置中可以切换选择使用<code>多说</code>或<code>disqus</code>；</li>
<li>增加了<code>分享</code>按钮，可以将感兴趣的或觉得好的博文、图片或部分文字（鼠标划选想分享的文字，自动弹出分享按钮）分享到常见社区；</li>
<li>一些CSS效果细节上的修改，如对超链接a、h3、span等元素的自定义样式</li>
<li>to be continued…💪💪💪</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[给自己的博客写了一个新主题]]>
    
    </summary>
    
      <category term="博客主题" scheme="http://cubernet.cn/blog/tags/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[让4S重新飞速运行起来]]></title>
    <link href="http://cubernet.cn/blog/iPhoneSpeedUp/"/>
    <id>http://cubernet.cn/blog/iPhoneSpeedUp/</id>
    <published>2014-04-24T16:39:16.000Z</published>
    <updated>2015-05-04T14:53:00.000Z</updated>
    <content type="html"><![CDATA[<p>作为一名奋战在第一线的程序猿，如果跟开发无关，那么对新系统的抵抗力几乎为0，所以当初毫不犹豫的升级了iOS7。年初越狱工具放出之后，也在第一时间进行了越狱。倒不是对破解的免费软件有什么需求，说白了就是三个字，爱折腾。</p>
<p>不过在用了一段时间之后，不得不承认iOS7在增加了许多功能改进和提高用户UI体验的同时，对系统内存和电池续航都提出了更大的需求。就我自己的4S而言，电池续航方面，保持正常频率的电话短信微信微博，基本半天就得充电。流畅度方面<br><a id="more"></a>更是糟糕，闪退现象极其严重，如果想运行一个稍微大一点的游戏，就需要将后台的其他应用全部关闭。</p>
<p>忍无可忍却又换不起5S的屌丝只好自己动手丰衣足食了。</p>
<p>仔细分析一下，升级手机或者降级系统这两个最easy的途径都行不通。那么还有什么别的因素影响续航和流畅度呢？</p>
<p>下面是我想到的一些：</p>
<hr>
<h2 id="卸载360">卸载360</h2><p>当初为了省事，越狱后直接安装了360，一些常用的功能都已经集成。但说实话，其实很多功能我都没有用，那么当我内存吃紧的时候，当然要吧这些无用的插件删除了。不过360不提供定制功能，只好把它整个卸载。【这里没有黑360的意思，360的垃圾短信过滤还是做得很不错的，我至今也没有找到一款在这方面可以相媲美的插件，如果你们知道，欢迎告诉我：）】</p>
<h4 id="深度清理系统垃圾">深度清理系统垃圾</h4><p>手机用久了，就会产生很多的系统垃圾，包括很多缓存文件、日志文件等。隔一段时间清理一下，就当是给系统洗洗澡啦。</p>
<h2 id="把系统语言设置为英文">把系统语言设置为英文</h2><p>把系统语言设置为英文后，打开AppStore和Cydia的速度简直快的让人不敢相信。当然，打开很多其他系统应用的速度都有明显改善。</p>
<p>其次，从字体显示的角度来说，切换成英文后，看起来还是美观了不少，毕竟iOS设计时肯定是从英文开始的。</p>
<p>这里对于我们中文用户来说，有一个问题就是，切换成英文后，通讯录联系人无法按照拼音首字母排序查询了，比较的不方便。</p>
<p>常见的有两种解决办法。</p>
<ul>
<li>一是在保存每个联系人的姓名时，同时保存中文和拼音，即每个联系人添加汉语拼音发音，这样就可以正常显示了；如果你觉得手动一个一个添加工作量太大，那么这里有一个批量添加的程序或许可以帮到你 <a href="https://github.com/lexrus/PhoneticContacts" target="_blank" rel="external">PhoneticContacts</a>。</li>
<li>另外一种就是先将iPhone 切换为中文，找到/System/Library/Frameworks/AddressBook.framework 将zh<em>CN.lproj目录下的 ABContactSections.plist 文件替换到English.lproj目录和其他两个zh</em>文件夹下，再切换其他语言；当然这种方法的前提是你的手机已经越狱。</li>
</ul>
<p>当然，如果你觉得自己无法适应一个英文版的操作系统。那。。。那你一定是土豪，恩。土豪直接换手机就好啦。</p>
<h2 id="安装一款电池保护软件">安装一款电池保护软件</h2><p>现在有很多电池保护软件，个人感觉差别都不是很大，选择一款你喜欢的安装。推荐安装这类软件的理由是，它可以帮你或多或少的养成良好的充电习惯，对电池的保养肯定是有好处的。</p>
<h2 id="最后推荐几款我在用的插件">最后推荐几款我在用的插件</h2><ul>
<li><strong>CCMeters</strong>    一款在通知中心显示当前手机运行参数的插件，包括cpu使用率，网速，内存等</li>
<li><strong>CCQuick</strong>    一款控制中心快捷设置的插件</li>
<li><strong>Chinese Calendar</strong>    一款在通知中心显示日历的插件，包括农历和节日，个人感觉还是很实用的</li>
<li><strong>FakeCarrier</strong>    一款修改运营商名称的插件</li>
<li><strong>Kuaidial</strong>    一款电话增强软件，包括接通震动，响一声来电过滤等</li>
<li><strong>OSLite7</strong>    一款一键清理应用程序产生的缓存与临时文件的插件</li>
</ul>
<p>以上插件都有对应的iOS7版本，亲测iOS7.0.4可用，如果你下载的版本不能兼容，请耐心寻找最新版本。</p>
<hr>
<p>折腾了一番之后，感觉系统流畅了许多，续航基本可以保证一天一充，更重要的是之前常用的功能现在还有，甚至多了一些新的功能，如果你跟我有同样的问题，不妨也按照我的方法试一试。</p>
]]></content>
    <summary type="html">
    <![CDATA[给运行ios7的iPhone4S加速]]>
    
    </summary>
    
      <category term="iPhone4S" scheme="http://cubernet.cn/blog/tags/iPhone4S/"/>
    
      <category term="ios7" scheme="http://cubernet.cn/blog/tags/ios7/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[牵着手，一起走]]></title>
    <link href="http://cubernet.cn/blog/oneyear/"/>
    <id>http://cubernet.cn/blog/oneyear/</id>
    <published>2014-04-22T16:39:16.000Z</published>
    <updated>2015-05-04T14:56:09.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xikui.com1.z0.glb.clouddn.com/2014-04-23-oneyear.JPG-blogpic" style="width:220px"></p>
<a id="more"></a>
<div style="text-align:center"><br><br><p>一年很长</p><br><br><p>我们了解，磨合，争吵，置气</p><br><br><p>一年很短</p><br><br><p>我们拥抱，热恋，旅行，玩耍</p><br><br><p>你总说</p><br><br><p>我是你最好的遇见</p><br><br><p>而我说</p><br><br><p>我遇见了最好的你</p><br><br><p>这一年中的快乐或不开心都超越过去的总和</p><br><br><p>这一年承载了我们彼此生命中最重要的决定</p><br><br><p>当岁月一年又一年褪去爱情华丽的外表</p><br><br><p>我相信剩下的</p><br><br><p>是绝对的信任和满满的爱</p><br><br><p>2014.04.23#一周年快乐，宝贝#</p><br><br>##GIFT<br><br>一份来自程序员的礼物。<a href="http://cubernet.cn/anniversary/" target="_blank" rel="external">点击查看</a><br><br></div>





]]></content>
    <summary type="html">
    <![CDATA[和宝贝老婆在一起一周年纪念日]]>
    
    </summary>
    
      <category term="纪念日" scheme="http://cubernet.cn/blog/tags/%E7%BA%AA%E5%BF%B5%E6%97%A5/"/>
    
      <category term="生活归档" scheme="http://cubernet.cn/blog/categories/%E7%94%9F%E6%B4%BB%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[给jekyll添加静态搜索]]></title>
    <link href="http://cubernet.cn/blog/staticsearch/"/>
    <id>http://cubernet.cn/blog/staticsearch/</id>
    <published>2014-04-17T16:39:16.000Z</published>
    <updated>2015-04-29T17:58:05.000Z</updated>
    <content type="html"><![CDATA[<p>使用jekyll在github上搭建博客之后，无论是从写作的舒适度还是维护的方便程度上来讲都比之前有了很大的提升，不过一直觉得美中不足的是缺少一个搜索功能。由于整个博客都是静态的，因此很难做到像WordPress那种使用数据库来提供强大的搜索功能。不过退而求其次，给jekyll添加静态搜索，实现基本的功能还是有可能的。</p>
<a id="more"></a>
<p>通过在Google搜索一番之后，发现了<a href="https://github.com/slashdotdash/jekyll-lunr-js-search" target="_blank" rel="external">jekyll-lun-js-search</a>这个插件，可以实现jekyll的静态搜索。话不多说，按照说明文件中的步骤开始动手配置。</p>
<p>配置完成，满怀期待在搜索框输入了一个单词，结果。。。是的，没有任何反应。</p>
<p>重新检查确认配置无误之后继续在网上寻找是不是有人也遇到类似的问题。果然有一个教程里提到这个插件有一些bug。窃喜，一一修改。结果。。。是的，依旧没有任何反应。</p>
<p>无耐操刀自己上，在又修改了几处代码中的bug之后还是未能配置成功。此时距当初发现这个插件已经过去了六七个小时。</p>
<p>这时只好修改思路，通过去找一些添加了搜索功能的jekyll博客，然后查看他的代码实现。果然发现了另外一个，而且这个插件使用非常简单，也无需配置那么多的文件，即<a href="https://github.com/christian-fei/Simple-Jekyll-Search" target="_blank" rel="external">Simple-Jekyll-Search</a></p>
<hr>
<p>由于两个插件都提供了很详细的配置说明，我这里就不再重复。</p>
<p>从实现的角度来说，静态搜索的大概思路都是提取文章html页面的关键内容，保存在一个文件中，然后通过遍历这个文件来返回搜索结果。但这两个插件在具体实现时还有所不同。jekyll-lun-js-search这款插件是通过一段ruby代码来生成保存有文章页面关键内容的文件。由于是通过ruby代码提取，因此这个文件的内容比较丰富，可以包含博客文章的正文，也就是说实现了全文搜索。但是Simple-Jekyll-Search这款插件是通过简单的jekyll语法来提取内容，因此在这个文件中无法包含文章正文，因为通过jekyll语法提取的博客正文会包含html代码。所以简单配置的背后，带来的是对全文搜索的舍弃。</p>
<p>另外，在调试第一个插件的过程时，虽然最后仍旧没有解决这个问题，而且我自己也不知道原因所在，但还是对jekyll的工作细节有了更多的了解，也知道了config文件中【<strong>安全</strong>】选项所代表的具体含义，第一次接触并修改了ruby代码。。等等。感觉收获还是很大的。</p>
<hr>
<p>额。。。好吧，我成功的把一篇技术文写成了流水账。</p>
]]></content>
    <summary type="html">
    <![CDATA[jekyll 静态搜索]]>
    
    </summary>
    
      <category term="jekyll" scheme="http://cubernet.cn/blog/tags/jekyll/"/>
    
      <category term="static search" scheme="http://cubernet.cn/blog/tags/static-search/"/>
    
      <category term="静态搜索" scheme="http://cubernet.cn/blog/tags/%E9%9D%99%E6%80%81%E6%90%9C%E7%B4%A2/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[虾米音乐app破解]]></title>
    <link href="http://cubernet.cn/blog/xiami/"/>
    <id>http://cubernet.cn/blog/xiami/</id>
    <published>2014-03-30T16:39:16.000Z</published>
    <updated>2015-05-04T14:57:15.000Z</updated>
    <content type="html"><![CDATA[<p>前几天登录虾米音乐，首页赫然提醒，建议用户将虾米账号迁移到淘宝上，以后用淘宝账号登录虾米。说实在的，当时心瞬间就凉了。就像当初排斥多看阅读迁移到小米账号上一样，我讨厌把自己在互联网上辛苦打造出来的一小片净土和BAT挂上勾。</p>
<p>说到这里，想起个“笑话”。</p>
<a id="more"></a>
<p><code>有人在逛淘宝搜索宝贝时，不小心输入错误，搜成了“棺材”。本以为只是一次手误，删了重来就可以。结果没想到的是，从此以后他每次再登录淘宝时，首页到处都是向他推荐棺材的。更过分的是，他的微博等各种社交空间上也到处都是推荐棺材的。欲哭无泪。</code></p>
<p>这就是天下账号大一统的后果，当然也是BAT希望看到的效果。</p>
<hr>
<p>言归正传。今天在看雪上注意到Hopper Disassembler这么一款软件，据说是mac平台上反编译神器，所以下下来体验一下。碰巧又在52上看到一个破解虾米音乐的例子，想到那让我心凉的虾米音乐，于是决定就对它下手了。</p>
<p>这次的任务是破解mac系统的虾米音乐app，使普通用户也可以享用VIP服务。</p>
<p>首先来一张破解之前的截图，未付费用户是无法享受高品质的。</p>
<p><img src="http://7xikui.com1.z0.glb.clouddn.com/2014-03-31-xiami-1.png-blogpic" alt="image"></p>
<p>然后打开HD，选择<code>Read Executable</code>-&gt;<code>应用程序</code>-&gt;<code>虾米音乐</code>-&gt;<code>Contents</code>-&gt;<code>MacOS</code>-&gt;<code>Xiami</code></p>
<p><img src="http://7xikui.com1.z0.glb.clouddn.com/2014-03-31-xiami-2.png-blogpic" alt="image"></p>
<p>等待几秒钟，待完全载入分析完成后，可以看到如下界面：</p>
<p><img src="http://7xikui.com1.z0.glb.clouddn.com/2014-03-31-xiami-3.png-blogpic" alt="image"></p>
<p>左边一栏列出了该程序中包含的函数，迅速浏览一遍，发现了一个<code>isVIP</code>的函数，从名字上猜测，这个函数是用来判断用户是不是VIP的（也可再搜索栏中直接搜isVip），点击左侧函数名，右侧便会显示出该函数对应的汇编指令。【这一步的截图丢失了，所以下面这张图是从52上搬过来的，可能稍微有点模糊】</p>
<p><img src="http://7xikui.com1.z0.glb.clouddn.com/2014-03-31-xiami-4.png-blogpic" alt="image"></p>
<p>从平时使用这款app的经验上可以得知，这款虾米客户端的功能比较简单，稍微复杂的操作都需要跳转到网页版进行，所以猜想客户端的逻辑验证也比较简单。</p>
<p>从<code>isVIP</code>这个函数中我们可以看到，首先对rbp压栈，然后做了几次赋值操作后，将rbp出栈返回。那么这个函数的实际工作过程有没有可能是：给用户一个是否为VIP的标识，然后通过向服务器查询，将返回值赋值给这个标识并返回。为了验证这个猜想，我们只需将rbp归零再加1，使其值为true，最后返回，如下图：</p>
<p><img src="http://7xikui.com1.z0.glb.clouddn.com/2014-03-31-xiami-5.png-blogpic" alt="image"></p>
<p>最后通过<code>File</code>-&gt;<code>Produce New Executable</code>来生成新的Xiami文件，替换原来的，双击运行，看到如下效果图：</p>
<p><img src="http://7xikui.com1.z0.glb.clouddn.com/2014-03-31-xiami-6.png-blogpic" alt="image"></p>
<p><img src="http://7xikui.com1.z0.glb.clouddn.com/2014-03-31-xiami-7.png-blogpic" alt="image"></p>
<p>看来我们猜测的没有错，现在已经可以享受高品质的音乐了。Have fun :)</p>
<hr>
<p>PS：由于是第一次在Mac上做相关的工作，所以觉得很新鲜很有趣，便记录下来，大神勿喷。</p>
<p>在此过程中，感谢52的xiaobai和NSTL卓博的大力帮助。</p>
]]></content>
    <summary type="html">
    <![CDATA[破解mac版的虾米音乐app]]>
    
    </summary>
    
      <category term="Hopper Disassembler" scheme="http://cubernet.cn/blog/tags/Hopper-Disassembler/"/>
    
      <category term="软件破解" scheme="http://cubernet.cn/blog/tags/%E8%BD%AF%E4%BB%B6%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[不想写诗的程序员不是好农民]]></title>
    <link href="http://cubernet.cn/blog/essay/"/>
    <id>http://cubernet.cn/blog/essay/</id>
    <published>2014-03-25T16:39:16.000Z</published>
    <updated>2015-05-04T14:52:51.000Z</updated>
    <content type="html"><![CDATA[<p>其实这篇本应该是2013的年终总结的，结果没想到拖到14年都过了四分之一，还是没有把这个坑补上。过了这么久，当初那份想写一点什么东西的心情早就没有了。简单的说，这一年算得上人生中另一个充满转折点的年份吧。爱情学业双丰收。但今年不会那么轻松，对我，对我的她，可能都是。我们都要好好努力。</p>
<p>最近发生了好多事情，有好有坏，细说无趣，不如随便说点感悟。</p>
<a id="more"></a>
<h2 id="关于父母">关于父母</h2><p>父母给予我们最大的财富，不在于从小的锦衣玉食，更多的是对自己人格品质上的沉淀和别人那里的良好口碑。</p>
<h2 id="关于师长">关于师长</h2><p>予渔非鱼乃为上，亦师亦友乃为上。翻译成大白话，“这个方向是好的，这个做法是错的，这杯酒干了”。</p>
<h2 id="关于爱情">关于爱情</h2><p>爱情好比是一种化合物，通过<code>付出+欣赏+真心→爱情</code>这个反应在时间的催化下得到爱情。不同的人会用不同的系数配平这个方程式。不同的系数孕育着不同种类的爱情。</p>
<h2 id="关于朋友">关于朋友</h2><p>本人生性胆小，自然不会让朋友两肋插棍棒刀枪去惹是生非。朋友间但求真心处、不两面，滴水恩必当涌泉报。</p>
<h2 id="关于读博">关于读博</h2><p>读博好比农民种田。勤劳的农民经过自己辛苦耕耘用收获的粮食盖房娶妻生子，懒惰的农民颗粒无收，荒废数年，仅得一“农民”称号。</p>
<h2 id="关于未来">关于未来</h2><p>秀才解字，“自食其果”，自己吃自己种下的果子。对我而言，虽不知未来何处得果，但相信必定会有幸福的果。</p>
<h2 id="关于自己">关于自己</h2><p>黑、胖、丑、呆，自以为现实世界也如二进制般非0即1。</p>
]]></content>
    <summary type="html">
    <![CDATA[苦逼程序员的随笔总结]]>
    
    </summary>
    
      <category term="life" scheme="http://cubernet.cn/blog/tags/life/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[无损修复白苹果]]></title>
    <link href="http://cubernet.cn/blog/iPhoneJailbreak/"/>
    <id>http://cubernet.cn/blog/iPhoneJailbreak/</id>
    <published>2014-01-31T16:39:16.000Z</published>
    <updated>2015-05-04T14:52:58.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>人生需要两次冲动，一次没事找事的刷机和一次奋不顾身的越狱。——Cubernet</p>
</blockquote>
<p>作为一名自认为生命不息，折腾不止的技术宅来说，刷机和越狱实乃消磨时间没事找事的最佳选择。由于技术水平有限加上刷机工具的不稳定，爱机变“砖”真的是经常遇见。</p>
<p>其实变“砖”不可怕，可怕的是重新刷了系统以后，之前手机里的照片、短信之类的资料都不见了。</p>
<a id="more"></a>
<p>由于Android系统可以比较轻松的以USB模式备份SD卡的数据，所以重刷系统之后恢复数据也是比较容易的。</p>
<p>但是iPhone在未越狱时只能通过iTunes来备份资料，而那个备份速度又慢的令人发指，所以对于我这个暴脾气来说，几乎每次越狱之前都没有做备份。曾经先后从windows或者MacOs上给iPhone4、iPhone4s、iPhone5越狱ios6和7。俗话说，就在江边走，哪有不湿鞋。我终究还是在这个喜气洋洋的春节中把老婆的爱机越成了白苹果。</p>
<p>想到几百张照片几千条短信瞬间荡然无存心头便是一阵疼啊。好在从网上找到了这个解决办法。</p>
<hr>
<p>其实方法很简单，首先从网上下载这个工具，<a href="http://download.csdn.net/detail/cubernet/6898403" target="_blank" rel="external">下载链接</a> <a href="http://download.csdn.net/detail/cubernet/6898403；" target="_blank" rel="external">http://download.csdn.net/detail/cubernet/6898403；</a></p>
<p>然后将你重新刷机需要的固件拖到这个工具的图标上；</p>
<p>几分钟后会在同目录下生成一个以UPG开头的固件；</p>
<p>最后，把iPhone调至调试模式，打开iTunes，然后刷那个UPG开头的固件即可。这样你之前的照片、应用程序等资料都还会保留。</p>
]]></content>
    <summary type="html">
    <![CDATA[保留数据的iPhone苹果手机刷机]]>
    
    </summary>
    
      <category term="iPhone" scheme="http://cubernet.cn/blog/tags/iPhone/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ClamAV相关]]></title>
    <link href="http://cubernet.cn/blog/clamav/"/>
    <id>http://cubernet.cn/blog/clamav/</id>
    <published>2014-01-22T16:39:16.000Z</published>
    <updated>2015-05-04T14:52:42.000Z</updated>
    <content type="html"><![CDATA[<p>填写这篇博文的日期时发现时间已经是2014年了，占坑留了好久的新年博文终究没有写，新年的第一篇文章就留给clamav吧。:)</p>
<p>本以为寒假回家可以轻松过个年，没想到项目加急，于是掀开了在家办公的序幕。这个项目和ClamAV相关，目前项目暂时告一段落，在这里做个简单记录。</p>
<blockquote>
<p>Clam AntiVirus（ClamAV）是免费而且开放源代码的杀毒软件，软件与病毒码的更新皆由社区免费发布。目前ClamAV主要是使用在由Linux、FreeBSD等Unix-like系统架设的邮件服务器上，提供电子邮件的病毒扫描服务。ClamAV本身是在文字接口下运作<br><a id="more"></a>，但也有许多图形接口的前端工具（GUI front-end）可用，另外由于其开放源代码的特性，在Windows与Mac OS X平台都有其移植版。——维基百科</p>
</blockquote>
<p>从维基百科中可以看到，最初的ClamAV是用来提供电子邮件病毒扫描服务的工具。不过现在ClamAV的功能已经远不止此，它可以扫描包括电子邮件在内的各种文件格式，并且它的病毒库也在实时更新。</p>
<hr>
<h2 id="安装及配置">安装及配置</h2><p>ClamAV是一套开源的杀毒软件，所以你可以从它的官网上下载到它的源码，按照自己的意愿对其修改之后，即可编译生成可执行文件。我在windows和Linux上均测试编译成功。</p>
<p>下面以Windows上的配置为例：</p>
<p><img src="http://7xikui.com1.z0.glb.clouddn.com/2014-1-23-clamav-1.png-blogpic" alt="image"></p>
<p>安装完成后将出现上面这些exe。其中常用到的只有三个，分别是clamscan.exe、freshclam.exe和sigtool.exe。</p>
<ul>
<li>Clamscan.exe是用来扫描文件或者目录的（支持递归以及压缩文件等）</li>
<li>Freshclam.exe是用来更新病毒库的</li>
<li>Sigtool.exe是用来新增病毒的。</li>
</ul>
<p>在安装完成后，首先需要从conf_example中将配置文件拷贝出来，然后将配置文件中的example字段注释掉。根据当前环境修改配置文件中的参数，如日志文件保存地址等。</p>
<p>正确配置以后，先执行freshclam来下载最新的病毒库。然后就可以扫描文件了。</p>
<p>扫描命令： clamscan –r [需要递归扫描的路径] –l [日志文件保存的路径]</p>
<p>扫描结果：</p>
<p>没有发现病毒的：<br><img src="http://7xikui.com1.z0.glb.clouddn.com/2014-1-23-clamav-2.png-blogpic" alt="image"></p>
<p>发现病毒的：<br><img src="http://7xikui.com1.z0.glb.clouddn.com/2014-1-23-clamav-3.png-blogpic" alt="image"></p>
<p>对应的日志文件：<br><img src="http://7xikui.com1.z0.glb.clouddn.com/2014-1-23-clamav-4.png-blogpic" alt="image"></p>
<hr>
<h2 id="配置文件实例">配置文件实例</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">/etc/clamd<span class="class">.conf</span></span><br><span class="line">LogFile /var/log/clamd<span class="class">.log</span>   日志文件</span><br><span class="line">LogFileMaxSize <span class="number">0</span>    日志文件最大体积</span><br><span class="line">LogTime yes    是否在日志文件中记录时间</span><br><span class="line">LogVerbose yes    是否详细记录日志</span><br><span class="line">PidFile /var/run/clamav/clamd<span class="class">.pid</span>    进程文件</span><br><span class="line">TemporaryDirectory /var/tmp    扫描时的临时目录</span><br><span class="line">DatabaseDirectory /var/clamav    病毒库目录</span><br><span class="line">LocalSocket /var/run/clamav/clamd<span class="class">.sock</span>    本地通讯的socket文件</span><br><span class="line">TCPSocket <span class="number">3310</span>    TCPSocket端口（与LocalSocket不可并存）</span><br><span class="line">FixStaleSocket    yes</span><br><span class="line">User    clamav</span><br><span class="line">ScanOLE2    扫描office文档</span><br><span class="line">ScanMail    扫描邮件</span><br><span class="line">ScanArchive    扫描压缩包</span><br><span class="line">ScanRAR    扫描RAR压缩包</span><br><span class="line">ArchiveMaxFileSize <span class="number">10</span>M    最大扫描压缩包文件为<span class="number">10</span>兆</span><br><span class="line">ArchiveMaxRecursion <span class="number">9</span>    扫描压缩包<span class="number">9</span>层</span><br><span class="line">ArchiveMaxFiles <span class="number">1000</span>    最多扫描压缩包内<span class="number">1500</span>个文件</span><br><span class="line">/etc/freshclam<span class="class">.conf</span></span><br><span class="line">DatabaseDirectory /var/clamav    病毒库目录</span><br><span class="line">UpdateLogFile /var/log/freshclam<span class="class">.log</span>    更新日志</span><br><span class="line">LogVerbose yes    是否详细记录日志</span><br><span class="line">PidFile /var/run/clamav/freshclam<span class="class">.pid</span>    进程文件</span><br><span class="line">DatabaseOwner clamav    病毒库用户</span><br><span class="line">DatabaseMirror db<span class="class">.cn</span><span class="class">.clamav</span><span class="class">.net</span>    病毒库的镜像地址（可以多个）</span><br><span class="line">DatabaseMirror database<span class="class">.clamav</span><span class="class">.net</span></span><br></pre></td></tr></table></figure>
<hr>
<p>除了调用clamscan等现有的工具，ClamAV还提供了一些更底层的API接口供那些有特殊需求的开发者使用，详细的介绍可以查看ClamAV官方文档的最后章节。</p>
]]></content>
    <summary type="html">
    <![CDATA[ClamAV的简单介绍]]>
    
    </summary>
    
      <category term="clamav" scheme="http://cubernet.cn/blog/tags/clamav/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Metasploit渗透测试相关——社会工程学]]></title>
    <link href="http://cubernet.cn/blog/Metasploit-6/"/>
    <id>http://cubernet.cn/blog/Metasploit-6/</id>
    <published>2013-12-30T16:39:16.000Z</published>
    <updated>2015-04-29T17:59:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>在计算机科学中，社会工程学指的是通过与他人的合法地交流，来使其心理受到影响，做出某些动作或者是透露一些机密信息的方式。这通常被认为是一种欺诈他人以收集信息、行骗和入侵计算机系统的行为。——维基百科</p>
</blockquote>
<p>从维基百科给出的定义可以看到，社会工程学实际上更多的应该属于社会学。所有的社会工程学攻击都是建立在使人决断产生认知偏差的基础上。<a id="more"></a></p>
<p>说到社会工程学，不得不提的就是美国前头号黑客凯文·米特尼克，他被公认为是社会工程学的大师和开山鼻祖，著有安全著作<code>《欺骗的艺术(art of deception)》</code>。</p>
<blockquote>
<p>安全，通常情况下仅仅是个幻想，由其是轻信、好奇和无知存在的时候。二十世纪最受尊敬的科学家爱因斯坦这样说道：“只有两种事物是无穷尽的――宇宙和人类的愚蠢。但对于前者,我不敢确定。”最终,社会工程学的攻击,成功于人们的愚蠢或更为普遍的对信息安全实践上的无知。——《欺骗的艺术》</p>
</blockquote>
<p>对社会工程学感兴趣的朋友可以去阅读一下，相信读过之后你会变的更机智。:)</p>
<hr>
<p>下面进入我们关注的部分，Metasploit相关的社会工程学。</p>
<p>Social-Engineer网站总结的社会工程学技术框架将社会工程学的基本过程分为：信息搜集、诱导、托辞与心理影响四个环节。</p>
<p>Back Track 5 中提供了功能强大的社会工程学攻击工具包(SET)，可以与Metasploit渗透测试平台框架进行协作使用，进行社会工程学攻击。</p>
<p>SET是一个综合性的工具集，涵盖了社会工程学攻击的完整流程，包括：针对性邮件钓鱼攻击、网站钓鱼攻击、群发邮件攻击、还有伪造短信攻击等。</p>
<p>这里我们只对网站钓鱼攻击做一个简单的介绍。</p>
<p>那么如何制作一个钓鱼网站呢。</p>
<p>首先在BT5中运行SET：</p>
<pre><code>root<span class="variable">@bt</span><span class="symbol">:~</span><span class="comment"># cd /pentest/exploits/set/</span>
root<span class="variable">@bt</span><span class="symbol">:/pentest/exploits/set</span> <span class="comment">#</span>
root<span class="variable">@bt</span><span class="symbol">:/pentest/exploits/set</span> <span class="comment"># ./set</span>
</code></pre><p>然后选择Social-Engineering Attacks，之后选择Website Attack Vectors，接下来进入的页面包含了多种网站攻击的功能，我们可以通过页面上的介绍文字对各个功能有一个简单的了解。</p>
<p>选择了其中一种功能后，就会出现选择搭建钓鱼网站方法的选项：</p>
<blockquote>
<p>使用预定义的网站模板；</p>
<p>克隆网站；</p>
<p>定制导入。</p>
</blockquote>
<p>最简单的方法就是克隆一个网站。输入要克隆的URL，确认后即可得到一个克隆好的网站，并且在你本地的80端口监听等待数据。</p>
]]></content>
    <summary type="html">
    <![CDATA[Metasploit]]>
    
    </summary>
    
      <category term="Metasploit" scheme="http://cubernet.cn/blog/tags/Metasploit/"/>
    
      <category term="渗透" scheme="http://cubernet.cn/blog/tags/%E6%B8%97%E9%80%8F/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Metasploit渗透测试相关——Metasploit相关]]></title>
    <link href="http://cubernet.cn/blog/Metasploit-2/"/>
    <id>http://cubernet.cn/blog/Metasploit-2/</id>
    <published>2013-12-27T16:39:16.000Z</published>
    <updated>2015-05-04T14:55:02.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Metasploit项目（Metasploit Project）是一个旨在提供安全漏洞信息（Vulnerability Information）计算机安全项目，可以协助安全工程师进行渗透测试（penetration testing）及入侵检测系统签名开发。</p>
<p>Metasploit项目最为知名的子项目是开源的Metasploit框架（Metasploit Framework），一套针对远程主机进行开发和执行“exploit代码（exploit code）”的工具。其他重要的子项目包括Opcode数据库、shellcode档案、安全研究等内容。<a id="more"></a></p>
<p>Metasploit项目知名的功能还包括反取证（anti-forensic）与规避工具（evasion tools），其中的某些工具已经内置在Metasploit Framework里面。</p>
<p>——维基百科</p>
</blockquote>
<!-- more -->
<p>这一节的内容多为从<code>《Metasploit用户指南》</code>中摘取出来的，感兴趣的朋友可以去阅读完整版。</p>
<hr>
<h2 id="在windows上的安装">在windows上的安装</h2><p>1、访问<a href="http://www.metasploit.com/download/下载Windows的安装文件。" target="_blank" rel="external">http://www.metasploit.com/download/下载Windows的安装文件。</a></p>
<p>2、找到下载好的安装文件并双击安装程序的图标。此时可能会出现安全警告。在安全警告界面上点击“运行（Run）”。当安装欢迎界面出现之后，点击“下一步（Next）”来继续。在Windows 7上，在出现最初安装界面之前可能需要10分钟时间。</p>
<p>3、接受许可协议书。</p>
<p>4、在你已经阅读并接受许可协议之后点击“下一步（Next）”继续。</p>
<p>5、选择一个安装Metasploit Framework的文件夹。在接下来的界面中，你可以选择安装在默认的文件夹下面或者单击文件夹图标来选择一个不同的目录或者硬盘驱动器。注意选择的目录必须是空目录。</p>
<p>6、点击“下一步（Next）”。</p>
<p>7、输入SSL端口号。</p>
<p>8、输入网络服务器名称来得到一个SSL证书，以使得浏览器运行来匹配其信息。</p>
<p>9、在“有效的天数（Days of validity）”区域中输入证书的有效期的天数。</p>
<p>10、点击“下一步（next）”以继续。此时可能出现一个防火墙的警告，接受其警告以继续。</p>
<p>11、此时会出现一个提醒你已经准备好安装Metasploit Framework的对话框。点击“下一步（Next）”以安装Metasploit Framework及其依赖文件。下个界面会运行接下来的安装程序。安装对话框显示着安装的进度。</p>
<p>12、当安装完成之后，点击“完成（Finish）”按钮。</p>
<h2 id="在linux上的安装">在linux上的安装</h2><p>1、访问<a href="http://www.metasploit.com/download/下载Linux" target="_blank" rel="external">http://www.metasploit.com/download/下载Linux</a> 32 bit或者64 bit安装包。保存安装文件到一个位置，比如可以放到桌面上。</p>
<p>2、打开一个终端。</p>
<p>3、改变执行安装包的模式。可以由以下命令实现：</p>
<pre><code>对于<span class="number">64</span>位的系统：
     chmod +x desktop/metasploit-latest-linux-x64-installer.<span class="command">run</span>
对于<span class="number">32</span>位的系统：
     chmod +x desktop/metasploit-latest-linux-x32-installer.<span class="command">run</span>
</code></pre><p>4、运行安装包。可以由以下命令实现：</p>
<pre><code>对于<span class="number">64</span>位系统：
    sudo desktop/metasploit-latest-linux-x64-installer.<span class="command">run</span>
对于<span class="number">32</span>位系统：
    sudo desktop/metasploit-latest-linux-x32-installer.<span class="command">run</span>
</code></pre><p>5、如果提示输入密码，请输入你的sudo密码。</p>
<p>6、安装界面出现之后，点击Forward开始安装。</p>
<p>7、接受协议并点击Forward。</p>
<p>8、选择一个安装文件夹然后点击Forward。</p>
<p>9、选择Yes注册Metasploit服务（推荐）。然后点击Forward。</p>
<p>10、输入Metasploit服务使用的端口号。默认的端口号是3790。点击Forward继续。</p>
<p>11、输入用来生成SSL证书的服务器名称。</p>
<p>12、输入希望SSL证书保持有效的天数。点击Forward继续。</p>
<p>13、输入thin服务器的端口号。默认为3000。点击Forward继续。</p>
<p>14、如果想要自动更新开发快照，选择Yes。点击Forward继续。</p>
<p>15、Ready to Install窗口出现。点击Forward开始安装进程。</p>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[Metasploit]]>
    
    </summary>
    
      <category term="Metasploit" scheme="http://cubernet.cn/blog/tags/Metasploit/"/>
    
      <category term="渗透" scheme="http://cubernet.cn/blog/tags/%E6%B8%97%E9%80%8F/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python框架のDjango]]></title>
    <link href="http://cubernet.cn/blog/Django/"/>
    <id>http://cubernet.cn/blog/Django/</id>
    <published>2013-12-26T16:39:16.000Z</published>
    <updated>2015-05-04T14:52:44.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MVC的软件设计模式，即模型M，视图V和控制器C。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。——维基百科</p>
</blockquote>
<hr>
<h2 id="组件">组件</h2><p>Django框架的核心包括：一个面向对象的映射器，用作数据模型（以Python类的形<a id="more"></a>式定义）和关联性数据库间的媒介；一个基于正则表达式的URL分发器；一个视图系统，用于处理请求；以及一个模板系统。</p>
<p>核心框架中还包括：</p>
<ul>
<li>一个轻量级的、独立的Web服务器，用于开发和测试。</li>
<li>一个表单序列化及验证系统，用于HTML表单和适于数据库存储的数据之间的转换。</li>
<li>一个缓存框架，并有几种缓存方式可供选择。</li>
<li>中间件支持，允许对请求处理的各个阶段进行干涉。</li>
<li>内置的分发系统允许应用程序中的组件采用预定义的信号进行相互间的通信。</li>
<li>一个序列化系统，能够生成或读取采用XML或JSON表示的Django模型实例。</li>
<li>一个用于扩展模板引擎的能力的系统。</li>
</ul>
<hr>
<h2 id="内置应用">内置应用</h2><p>Django 包含了很多应用在它的”contrib”包中，这些包括：</p>
<ul>
<li>一个可扩展的认证系统</li>
<li>动态站点管理页面</li>
<li>一组产生RSS和Atom的工具</li>
<li>一个灵活的评论系统</li>
<li>产生Google站点地图（Google Sitemaps）的工具</li>
<li>防止跨站请求伪造（cross-site request forgery）的工具</li>
<li>一套支持轻量级标记语言（Textile和Markdown）的模板库</li>
<li>一套协助创建地理信息系统（GIS）的基础框架</li>
</ul>
<hr>
<h2 id="服务的部署">服务的部署</h2><p>Django可以运行在启用了mod python的Apache 2上，或是任何WSGI兼容的Web服务器。Django也有启动FastCGI服务的能力，因此能够应用于任何支持FastCGI的机器上。</p>
<p>下列数据库引擎被Django官方支持：</p>
<ul>
<li>PostgreSQL</li>
<li>MySQL</li>
<li>SQLite</li>
<li>Oracle</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Python框架Django的简单介绍]]>
    
    </summary>
    
      <category term="Django" scheme="http://cubernet.cn/blog/tags/Django/"/>
    
      <category term="Python" scheme="http://cubernet.cn/blog/tags/Python/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac相关]]></title>
    <link href="http://cubernet.cn/blog/Mac/"/>
    <id>http://cubernet.cn/blog/Mac/</id>
    <published>2013-12-25T16:39:16.000Z</published>
    <updated>2015-05-04T14:53:07.000Z</updated>
    <content type="html"><![CDATA[<p>不知不觉入手MacBook Pro也有一段时间了，从当初对OS X一无所知到现在用的得心应手，中间还是经历了很多曲折。索性记录下来，希望可以帮助到需要的朋友。</p>
<hr>
<p>在这个过程中要特别感谢池建强老师，从他的公众微信中学到了很多OS X上面的技巧，这里也推荐大家都去关注一下，微信号：<strong>MacTalk By 池建强</strong><a id="more"></a></p>
<hr>
<p>作为一名还处在读书期间的程序猿，拥有一台自己的Pro真的是最大的心愿。倒不是因为它可以装逼，而是OS X的一些浑然天成的特性使得你在这台机器上的编码变成了一种巨大的享受。</p>
<p>想用好OS X，必须要掌握一些基本的快捷键，然后再给你的系统装上一些好用的Mac平台的工具，分分中你就会对它爱不释手。</p>
<h2 id="非常常用的快捷键">非常常用的快捷键</h2><pre><code>Command+<span class="keyword">Tab</span>    切换应用程序
Command+~    同一应用程序多窗口之间切换
Command+<span class="keyword">Delete</span>    把选中的资源移动到废纸篓
Shift+Command+<span class="keyword">Delete</span>    倾倒相关程序的废纸篓
Command+<span class="keyword">C</span>/V    复制/粘贴
Command+Q    退出应用程序
Command+W    关闭程序但并没有完全退出，下次可快速打开
Command+<span class="keyword">Space</span>    切换输入法
<span class="keyword">Control</span>+<span class="keyword">Space</span>    呼出Spotlight
</code></pre><h2 id="我喜欢用的工具">我喜欢用的工具</h2><ul>
<li><p>Spotlight——强大的搜索工具，谁用谁知道</p>
<p>有了Spotlight以后，很多文件都不用怎么去整理，当你需要它的时候，直接在这里搜索就可以了。</p>
</li>
<li><p>Toggle Alfred</p>
<p>  Spotlight是搜索文本的神器，这款是搜索应用app的神器，有了这两大神器以后，不管找文件还是打开应用，都不再是头疼的事。</p>
</li>
</ul>
<ul>
<li><p>iWork</p>
<p>  现在iWork已经可以从iTunes免费下载，习惯了以后你会发现它比Office强大的多。</p>
</li>
<li><p>文本编辑器</p>
<ul>
<li><p>VIM</p>
<p>  作为一名码农，我对VIM有着天生的喜爱。即便你可以说出一万条它的不好，我还是会无条件的喜欢它。还是那句话，谁用谁知道。</p>
</li>
<li><p>Mou</p>
<p>  这款是一款可以实时预览MarkDown格式文本的编辑器，这个博客里的所有文章都是在这款编辑器里面完成的。简洁、高效、免费。MarkDown文本编辑的不二选择。</p>
</li>
</ul>
</li>
<li><p>XtraFinder</p>
<p>  Finder插件，完全的自由和免费，让你的Finder支持tab、多窗口、剪切等实用的功能，非常好用。</p>
</li>
<li><p>输入法</p>
<p>  说实在的，现在系统自带的输入法已经非常的好用了，唯一让我觉得不舒服的地方是如果翻页的话，需要按方向键↓而不是+，也就是因为这一小点，我转到了搜狗输入法的阵营（对不起我就是这么吹毛求疵o(╯□╰)o处女座伤不起啊）搜狗输入法不用多讲了吧，大家都很熟悉。</p>
</li>
<li><p>EverNote &amp; Kindle for Mac</p>
<p>  一个是优秀的笔记软件，一个是优秀的阅读软件，足矣。</p>
</li>
</ul>
<hr>
<h2 id="编程">编程</h2><p>Mac系统自带PHP和Python，所以写起脚本来非常方便。</p>
<p>当然，不管是写C、JAVA还是脚本，不管是在VIM中、在Eclipse中还是Xcode中，所有的编程工作都变成了一种享受。你能感觉到自己写下的每一个代码都和这个系统和谐的融合在一起。</p>
<p>设置了一些自启动项目后，可以达到开机即可访问到自己本地的论坛（其中保存着许多规整好的资料），非常方便。</p>
<p>Mac系统独特的字体显示和界面风格使得在电脑上阅读电子书和项目文档不再是一件令人头痛的事情。</p>
<p>但是不得不承认，在一些Linux原生应用软件的安装上偶尔还是会有一点小曲折。比如在Mac上安装Metasploit时耗费了我很多的时间，好在安装好了以后使用起来的效果还是要比在Windows上好的多。</p>
<p>还有一个好处就在于，你可以随时随地的合上盖子说走就走，也可以随时停下来打开盖子写上几行代码，强大的续航能力加上Mac对当前状态的记忆效果使得我经常是几周才关一次机。</p>
<hr>
<p>总之，在我看来Mac系统是把Linux系统编程的便利性高效性和Windows系统的易用性美观性做到了最好的结合。</p>
<p>当然我们也无需评判出哪个更好，选择最适合自己的，just have fun。：）</p>
]]></content>
    <summary type="html">
    <![CDATA[Macbook Pro的一些使用心得]]>
    
    </summary>
    
      <category term="Life" scheme="http://cubernet.cn/blog/tags/Life/"/>
    
      <category term="Mac" scheme="http://cubernet.cn/blog/tags/Mac/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python应用の简单的爬虫]]></title>
    <link href="http://cubernet.cn/blog/python-spider/"/>
    <id>http://cubernet.cn/blog/python-spider/</id>
    <published>2013-12-25T16:39:16.000Z</published>
    <updated>2015-05-04T14:56:43.000Z</updated>
    <content type="html"><![CDATA[<p>如果想实现一个简单的爬虫，我想Python一定是最容易上手的。这里就介绍一下如何用Python实现一个简单的爬虫。</p>
<p>爬虫最主要的处理对象就是url，其通常的工作流程就是通过给定的入口url爬取网页内容，然后从得到的网页中寻找下一级的url，接着继续重复以上的工作，直到达到包含所需内容的页面，提取到我们关心的数据。</p>
<blockquote>
<p>网络蜘蛛（Web spider）也叫网络爬虫（Web crawler），指的是“自动化浏览网络”的程序，是网络机器人的一种。这样的电脑程序是为了自动从网络截取特定的数据，或<a id="more"></a>为了组织网络上的数据，所设计的“‘自动浏览网络’的程序”。——维基百科</p>
</blockquote>
<p>所以，我们需要用到哪些知识就很显而易见了。</p>
<hr>
<h2 id="首先，我们要知道如何使用Python获取特定url对应的网页内容。">首先，我们要知道如何使用Python获取特定url对应的网页内容。</h2><p>最简单的，向特定url发送get请求，获取网页内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readsrc</span><span class="params">(src)</span>:</span></span><br><span class="line"><span class="comment">#获取src网址对应的html代码</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        content = urllib2.urlopen(src).read()</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line">    <span class="keyword">except</span> URLError,e:</span><br><span class="line">        <span class="keyword">print</span> e.code</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure>
<p>有时候服务器会通过http报文的header来判断你是不是一个真正的‘human’，所以需要给你的发送的报文添加一个浏览器标示，来简单的迷惑服务器。同时，很多情况下我们需要通过发送post请求来传递更多的数据，那么可以这么写：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line">user_agent = <span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span> </span><br><span class="line">headers = &#123; <span class="string">'User-Agent'</span> : user_agent, <span class="string">'Accept-Language'</span>: <span class="string">':zh-CN,zh;q=0.8,en;q=0.6'</span> &#125; </span><br><span class="line">data = <span class="string">''</span> </span><br><span class="line">	</span><br><span class="line">req = urllib2.Request(geturl2, data, headers)    </span><br><span class="line">response = urllib2.urlopen(req)    </span><br><span class="line">web_page = response.<span class="keyword">read</span>()</span><br></pre></td></tr></table></figure>
<p>如果你的爬虫想爬取的网站需要先登录才可以继续浏览，这个时候你就需要通过处理cookies等字段来维持爬虫保持<code>登录</code>状态。</p>
<figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib    </span><br><span class="line"><span class="keyword">import</span> urllib2  </span><br><span class="line"><span class="keyword">import</span> cookielib  </span><br><span class="line">  </span><br><span class="line">cookie = cookielib.<span class="type">CookieJar</span>()    </span><br><span class="line">opener = urllib2.build_opener(urllib2.<span class="type">HTTPCookieProcessor</span>(cookie))  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#需要POST的数据#  </span></span><br><span class="line">postdata=urllib.urlencode(&#123;    </span><br><span class="line">'name':'<span class="type">Cubernet</span>',    </span><br><span class="line">'pwd':'<span class="type">Oppos</span>...'    </span><br><span class="line">&#125;)  </span><br><span class="line">	  </span><br><span class="line"><span class="comment">#自定义一个请求#  </span></span><br><span class="line">req = urllib2.<span class="type">Request</span>(    </span><br><span class="line">url = 'http://cubernet.me/login.php',    </span><br><span class="line">data = postdata  </span><br><span class="line">) </span><br><span class="line">	   </span><br><span class="line"><span class="comment">#访问该链接#  </span></span><br><span class="line"><span class="literal">result</span> = opener.open(req）</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Http异常处理">Http异常处理</h2><p>服务器上每一个HTTP的应答对象response都包含一个数字”状态码”。上面例1中的代码如果出现异常，则会把http异常的状态码答应出来，常见的404等。</p>
<p>HTTP状态码通常分为5种类型，分别以1～5五个数字开头，由3位整数组成：</p>
<pre><code><span class="number">200</span>：请求成功      处理方式：获得响应的内容，进行处理 
<span class="number">201</span>：请求完成，结果是创建了新资源。新创建资源的URI可在响应的实体中得到        处理方式：爬虫中不会遇到 
<span class="number">202</span>：请求被接受，但处理尚未完成    处理方式：阻塞等待 
<span class="number">204</span>：服务器端已经实现了请求，但是没有返回新的信 息。如果客户是用户代理，则无须为此更新自身的文档视图。    处理方式：丢弃
<span class="number">300</span>：该状态码不被HTTP/<span class="number">1.0</span>的应用程序直接使用， 只是作为<span class="number">3</span>XX类型回应的默认解释。存在多个可用的被请求资源。    处理方式：若程序中能够处理，则进行进一步处理，如果程序中不能处理，则丢弃
<span class="number">301</span>：请求到的资源都会分配一个永久的<span class="built_in">URL</span>，这样就可以在将来通过该<span class="built_in">URL</span>来访问此资源    处理方式：重定向到分配的<span class="built_in">URL</span>
<span class="number">302</span>：请求到的资源在一个不同的<span class="built_in">URL</span>处临时保存     处理方式：重定向到临时的<span class="built_in">URL</span> 
<span class="number">304</span> 请求的资源未更新     处理方式：丢弃 
<span class="number">400</span> 非法请求     处理方式：丢弃 
<span class="number">401</span> 未授权     处理方式：丢弃 
<span class="number">403</span> 禁止     处理方式：丢弃 
<span class="number">404</span> 没有找到     处理方式：丢弃 
<span class="number">5</span>XX 回应代码以“<span class="number">5</span>”开头的状态码表示服务器端发现自己出现错误，不能继续执行请求    处理方式：丢弃
</code></pre><hr>
<h2 id="知道了如何获取网页内容，接下来需要做的工作就是如何从爬取到的网页代码中找到自己需要的下级url。">知道了如何获取网页内容，接下来需要做的工作就是如何从爬取到的网页代码中找到自己需要的下级url。</h2><p>很显然，这里我们需要用到<code>正则表达式</code>这个神奇的工具。</p>
<p>很多时候我们可能觉得正则很鸡肋，学起来知识点比较琐碎，但又没有很明显的用武之地。网上对正则有一个很形象的比喻，“匕首”。所谓匕首，即它不像十八般武器那么炫酷，但是在关键时刻却能起到意想不到的效果。</p>
<p>这里只介绍Python正则表达式中最常用最简单的一种，想更进一步了解的同学可以查阅一下资料，网上有很多总结的不错，我这里就不赘述啦：）</p>
<p><code>re.compile(strPattern[, flag]):</code></p>
<p>这个方法是Pattern类的工厂方法，用于将字符串形式的正则表达式编译为Pattern对象。</p>
<p>第二个参数flag是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如re.I | re.M。</p>
<p>另外，也可以在regex字符串中指定模式。比如<code>re.compile(&#39;pattern&#39;, re.I | re.M)</code>与<code>re.compile(&#39;(?im)pattern&#39;)</code>是等价的。可选值有：</p>
<pre><code>re.<span class="function"><span class="title">I</span><span class="params">(IGNORECASE)</span></span>        忽略大小写
re.<span class="function"><span class="title">M</span><span class="params">(MULTILINE)</span></span>            多行模式
re.<span class="function"><span class="title">S</span><span class="params">(DOTALL)</span></span>            点任意匹配模式
re.<span class="function"><span class="title">L</span><span class="params">(LOCALE)</span></span>            使预定字符类 \w \W \<span class="tag">b</span> \B \s \S 取决于当前区域设定
re.<span class="function"><span class="title">U</span><span class="params">(UNICODE)</span></span>            使预定字符类 \w \W \<span class="tag">b</span> \B \s \S \d \D 取决于unicode定义的字符属性
re.<span class="function"><span class="title">X</span><span class="params">(VERBOSE)</span></span>            详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。
</code></pre><hr>
<p>最后，想要让你的爬虫足够机智，你必须赋予它灵活的逻辑判断和高效的正则表达式。个人认为赋予爬虫什么样的逻辑才是一个写爬虫真正的精华和难点所在。而这些又是只能依靠个人经验去提升和摸索的。所以还是要多写多练手。</p>
<p>当然，你可以通过增加代理、设置超时、伪装浏览器、反“盗链”等多种手段来提升爬虫的战斗力，但，逻辑依然是它的灵魂所在。</p>
]]></content>
    <summary type="html">
    <![CDATA[用Python实现的一个简单爬虫]]>
    
    </summary>
    
      <category term="Python" scheme="http://cubernet.cn/blog/tags/Python/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Phishing——愿者上钩]]></title>
    <link href="http://cubernet.cn/blog/Phishing/"/>
    <id>http://cubernet.cn/blog/Phishing/</id>
    <published>2013-12-25T16:39:16.000Z</published>
    <updated>2015-04-29T17:59:42.000Z</updated>
    <content type="html"><![CDATA[<p>最近在做一个和防钓鱼相关的项目，开始之前，也是阅读了大量的资料和论文，在此做一个简单的总结。</p>
<blockquote>
<p>钓鱼式攻击（Phishing，与钓鱼的英语fishing发音一样，又名“网钓法”或“网络网钓”）是一种企图从电子通信中，通过伪装成信誉卓著的法人媒体以获得如用户名、密码和信用卡明细等个人敏感信息的犯罪诈骗过程。这些通信都声称（自己）来自于风行的社交网站、拍卖网站、网络银行、电子支付网站、或网络管理者（雅虎、互联网服务提供商、公司机关），以此来诱骗受害人的轻信。——维基百科</p>
</blockquote>
<hr>
<h2 id="常见的Phishing使用的攻击方法：">常见的Phishing使用的攻击方法：</h2><a id="more"></a>
<ol>
<li>伪装电子邮件发件人地址</li>
<li>利用IE允许“URL伪装”的安全漏洞</li>
<li>利用网络重定向技术</li>
<li>跨站钓鱼</li>
<li>搜索入侵</li>
<li>修改HOSTS文件</li>
<li>与系统升级补丁或应用程序捆绑</li>
<li>利用短信息和即时通信实现网络仿冒攻击</li>
</ol>
<hr>
<h2 id="当前存在的防御措施：">当前存在的防御措施：</h2><ol>
<li><p>商务网站和网上银行加强自身安全防御</p>
<p>积极分析自己的网站访问日志，以及确保网站没有被拷贝成赝品网站。公司要定期对DNS进行扫描，以检查是否存在一个与公司已注册的相类似域名。</p>
</li>
<li>网页及垃圾邮件过滤<ol>
<li>通过不断搜集各种不同仿冒式欺诈攻击电子邮件，并提取数据组成规则库，集成在邮件防火墙中。</li>
<li>阻止用户被引导到名声不好的Web站点上，对网络仿冒进行阻断。当客户收到垃圾邮件，那么包含在这封垃圾邮件中的链接都将被添加到一个受阻站点列表中。（可能有误操作）</li>
</ol>
</li>
<li>电子邮件发件人认证</li>
<li>强身份认证</li>
<li>网络侦测</li>
<li>注册并启用中文域名</li>
</ol>
<hr>
<h2 id="基于Zooko三角形理论的浏览器插件的设计">基于Zooko三角形理论的浏览器插件的设计</h2><p> 根据Zooko的三角形理论，网上名字不可能同时具有通用性、可记忆性、安全唯一性。在Zooko的三角形模型的基础上构建一个Phishing防御系统框架。每个网站都有三个属性构成：</p>
<ol>
<li><p>URL/IP  具有通用性和安全唯一性，但是不具备可记忆性；</p>
</li>
<li><p>Public Name 具有通用性和可记忆性，但是不具有安全唯一性；</p>
</li>
<li><p>Private Name 具有安全唯一性和可记忆性，但是是私有的，不具有通用性。</p>
</li>
</ol>
<p>Public Name是当进入一个网站的时候的默认名字，它不是唯一的，不具有安全性，但是可以用来记住URL/IP，帮助选择Private Name。Public Name通常是公司网站选择的，期望把这些名字作为URL/IP的参考帮助用户记忆，当然用户也能对其进行修改，浏览器收藏夹就是一个例子。Public Name和URL/IP是一对多的关系，它是可选的，不是必须的。</p>
<p>Private Name是用户私有的，和URL/IP是一对一的关系。在计算机规则里，对一个特定的用户访问的特定网站，Private Name是唯一的，每个Private Name精确的对应一个URL/IP，而每个URL/IP精确的被一个Private Name所代表。在浏览器中，当连接到指定URL/IP的时候，Private Name将会显示。在用户界面中对URL/IP的所有引用都将会被Private Name所代替。</p>
<p>我们只需要在客户端设计一个浏览器插件，而不需要对服务器进行任何设置。插件以显眼的方式显示在浏览器的上方，当用户第一次登录网站的时候，要求用户输入Private Name。当用户下一次通过链接或直接输入URL访问网站的时候，Private Name便会显示出来，并显示为绿色标志。</p>
]]></content>
    <summary type="html">
    <![CDATA[网络钓鱼相关介绍]]>
    
    </summary>
    
      <category term="Phishing" scheme="http://cubernet.cn/blog/tags/Phishing/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[电子科技大学一键评教]]></title>
    <link href="http://cubernet.cn/blog/easy-evaluation/"/>
    <id>http://cubernet.cn/blog/easy-evaluation/</id>
    <published>2013-12-25T16:39:16.000Z</published>
    <updated>2015-05-04T14:52:46.000Z</updated>
    <content type="html"><![CDATA[<p>这个是电子科技大学本科一键评教的js脚本，很久之前了，貌似当时是在网上看到的【原作者看见了请联系我:)】，于是存了下来，现在整理代码看到，顺便贴出来，有兴趣的同学可以把它完善一下，整个研究生版的，或者增加选课的功能。<br><a href="https://github.com/Cubernet/EasyEvaluation" target="_blank" rel="external">github链接</a></p>
<a id="more"></a>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">function</span><span class="list">()</span><span class="collection">&#123;</span><br><span class="line">   	var done = <span class="literal">false</span><span class="comment">;</span></span><br><span class="line">   	var zdframe = document.getElementById<span class="list">(<span class="string">"iframeautoheight"</span>)</span><span class="comment">;</span></span><br><span class="line">   	var num = zdframe.contentWindow.document.getElementById<span class="list">(<span class="string">"pjkc"</span>)</span>.getElementsByTagName<span class="list">(<span class="string">"option"</span>)</span>.num;</span><br><span class="line">   	var count = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">   	try<span class="collection">&#123;</span><br><span class="line">       	var setAll = function<span class="list">()</span><span class="collection">&#123;</span><br><span class="line">        	   var selects = zdframe.contentWindow.document.getElementsByClassName<span class="list">(<span class="string">"datelist"</span>)</span><span class="collection">[<span class="number">0</span>]</span>.getElementsByTagName<span class="list">(<span class="string">"select"</span>)</span><span class="comment">;</span></span><br><span class="line">           	for<span class="list">(<span class="keyword"><span class="built_in">var</span></span> i =0; i &lt; selects.num;i++)</span><span class="collection">&#123;</span><br><span class="line">               	selects<span class="collection">[i]</span>.value=<span class="string">"优秀"</span><span class="comment">;</span></span><br><span class="line">           	&#125;</span><span class="comment">;</span></span><br><span class="line">       	&#125;</span><span class="comment">;</span></span><br><span class="line">       	var submitData = function<span class="list">()</span><span class="collection">&#123;</span><br><span class="line">           	if<span class="list">(<span class="keyword">done</span>)</span> return;</span><br><span class="line">           	if<span class="list">(<span class="keyword"><span class="built_in">count</span></span> &gt;= num)</span> <span class="collection">&#123;</span><br><span class="line">               	done = <span class="literal">true</span><span class="comment">;</span></span><br><span class="line">               	zdframe.contentWindow.document.getElementById<span class="list">(<span class="string">"Button2"</span>)</span>.click<span class="list">()</span><span class="comment">;</span></span><br><span class="line">               	alert<span class="list">(<span class="string">"Congratulations! You've fucked this fucking system!"</span>)</span><span class="comment">;</span></span><br><span class="line">               	return;</span><br><span class="line">           	&#125;</span></span><br><span class="line">           	count ++;</span><br><span class="line">           	zdframe.contentWindow.document.getElementById<span class="list">(<span class="string">"Button1"</span>)</span>.click<span class="list">()</span><span class="comment">;</span></span><br><span class="line">       	&#125;</span><span class="comment">;</span></span><br><span class="line">       	zdframe.addEventListener<span class="list">(<span class="string">"load"</span>, function<span class="list">()</span><span class="collection">&#123;</span><br><span class="line">           	setAll<span class="list">()</span><span class="comment">;</span></span><br><span class="line">           	submitData<span class="list">()</span><span class="comment">;</span></span><br><span class="line">      	 &#125;</span>)</span><span class="comment">;</span></span><br><span class="line">       	setAll<span class="list">()</span><span class="comment">;</span></span><br><span class="line">       	submitData<span class="list">()</span><span class="comment">;</span></span><br><span class="line">   	&#125;</span></span><br><span class="line">   	catch<span class="list">(<span class="keyword">e</span>)</span><span class="collection">&#123;</span><br><span class="line">       	done = <span class="literal">true</span><span class="comment">;</span></span><br><span class="line">       	console.log<span class="list">(<span class="string">"Ooops...There's something wrong!"</span>)</span><span class="comment">;</span></span><br><span class="line">   	&#125;</span></span><br><span class="line">&#125;</span>)</span><span class="list">()</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[电子科技大学一键评教]]>
    
    </summary>
    
      <category term="code" scheme="http://cubernet.cn/blog/tags/code/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[重新回归github]]></title>
    <link href="http://cubernet.cn/blog/first-post/"/>
    <id>http://cubernet.cn/blog/first-post/</id>
    <published>2013-12-24T16:39:16.000Z</published>
    <updated>2015-05-04T14:52:53.000Z</updated>
    <content type="html"><![CDATA[<p>这是我第二次折腾借用Github来制作自己的博客。</p>
<p>上一次是去年圣诞的时候，当时水平所限，很多地方没有搞清楚，所以最终的博客也是惨不忍睹。自认为这一次比之前进步了许多，当然，这里要感谢一下pengx17和Codepiano提供主题模板。</p>
<a id="more"></a>
<p>其实在我的那个用Wordpress搭建的博客已经用了很久，之所以一直对Github念念不忘是因为我想在这里发一些自己写的小工具，如果有感兴趣的朋友看到了，可以联系我，我们一起完善他们。</p>
<blockquote>
<p>“The quieter you become, the more you are able to hear…”</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[关于我]]>
    
    </summary>
    
      <category term="about me" scheme="http://cubernet.cn/blog/tags/about-me/"/>
    
      <category term="生活归档" scheme="http://cubernet.cn/blog/categories/%E7%94%9F%E6%B4%BB%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[超好用的iceweasel插件]]></title>
    <link href="http://cubernet.cn/blog/iceweasel/"/>
    <id>http://cubernet.cn/blog/iceweasel/</id>
    <published>2013-08-07T16:39:16.000Z</published>
    <updated>2015-05-04T14:52:56.000Z</updated>
    <content type="html"><![CDATA[<p>首先感谢rootoorotor大神，从他的博客里学到了很多东西，这几天更新的文章也都是从他的博客里挑选出来的一些我对我个人比较适用的部分，再加上一点我自己的理解而写出来的。博客链接：<a href="http://www.rootoorotor.org/" target="_blank" rel="external">rootoorotor‘Blog</a></p>
<p>Kali自带的浏览器是iceweasel，而iceweasel其实就是Debian下的Firefox。话说为何改头换面用了全新的名字，其实中间有一段小故事，感兴趣的同学可以自己百度一下。</p>
<p>如果你习惯了windows下的各种其他千奇百怪的浏览器而觉得iceweasel的功能设计过于不人性化时，不妨试试下面的这些插件，它们会将你的iceweasel打造成一款web入口神器。<a id="more"></a></p>
<h2>1.Adblock Plus 广告过滤神器</h2>

<hr>

<p>厌烦了网页上接连不断的广告弹框？Adblock 还你纯净页面。</p>
<p><a title="https://addons.mozilla.org/zh-cn/firefox/addon/adblock-plus/?src=cb-dl-users" href="https://addons.mozilla.org/zh-cn/firefox/addon/adblock-plus/?src=cb-dl-users" target="_blank" rel="external">https://addons.mozilla.org/zh-cn/firefox/addon/adblock-plus/?src=cb-dl-users</a></p>
<hr>

<h2>2.Add to Search Bar 添加至搜索栏</h2>

<hr>

<p>个人觉得一款超好用的插件，只需在你想添加的搜索栏上右键，选择Add to Search Bar，就可以将任意网站的搜索栏添加到浏览器的搜索框，这个功能简直太赞了。</p>
<p>当你把知乎、天猫等各类网站的搜索栏都添加进去后，以后不管你想搜索什么东西，都只需要将关键词托到浏览器搜索框就ok了，是不是非常方便。</p>
<p><a title="https://addons.mozilla.org/zh-CN/firefox/addon/add-to-search-bar/" href="https://addons.mozilla.org/zh-CN/firefox/addon/add-to-search-bar/" target="_blank" rel="external">https://addons.mozilla.org/zh-CN/firefox/addon/add-to-search-bar/</a></p>
<hr>

<h2>3.将地址栏和搜索栏合并</h2>

<hr>

<p>瞬间拥有超大的搜索输入空间，直接在地址栏直接输入关键词的时候，再也不用看到那脑残的错误页面了。</p>
<p><a title="https://addons.mozilla.org/zh-CN/firefox/addon/omnibar/?src=search" href="https://addons.mozilla.org/zh-CN/firefox/addon/omnibar/?src=search" target="_blank" rel="external">https://addons.mozilla.org/zh-CN/firefox/addon/omnibar/?src=search</a></p>
<hr>

<h2>4.QuickDrag拖拽搜索</h2>

<hr>

<p>将2、3、4这三个插件配合起来使用，那体验真是欲仙欲死有木有！</p>
<p><a title="https://addons.mozilla.org/zh-CN/firefox/addon/quickdrag/?src=search" href="https://addons.mozilla.org/zh-CN/firefox/addon/quickdrag/?src=search" target="_blank" rel="external">https://addons.mozilla.org/zh-CN/firefox/addon/quickdrag/?src=search</a></p>
<hr>

<h2>5.Firebug</h2>

<hr>

<p>如果你之前不晓得F12的作用的话，这个插件请自动无视。</p>
<p><a title="https://addons.mozilla.org/zh-CN/firefox/addon/firebug/?src=search" href="https://addons.mozilla.org/zh-CN/firefox/addon/firebug/?src=search" target="_blank" rel="external">https://addons.mozilla.org/zh-CN/firefox/addon/firebug/?src=search</a></p>
<hr>

<h2>6.HTTPS Everywhere</h2>

<hr>

<p>在墙内上google等一些国外网站的时候，总是会突然断开，其实只要通过https访问就没有问题了。而这款插件可以当访问提供SSL服务的网站时，自动采用https连接。</p>
<p><a title="https://www.eff.org/https-everywhere" href="https://www.eff.org/https-everywhere" target="_blank" rel="external">https://www.eff.org/https-everywhere</a></p>
<hr>

<h2>7.HackBar</h2>

<hr>

<p>Firefox最好用的渗透测试扩展之一，包含一些常用的工具比如SQL注入，XSS等等…手工党必备</p>
<p><a title="https://addons.mozilla.org/zh-CN/firefox/addon/hackbar/?src=search" href="https://addons.mozilla.org/zh-CN/firefox/addon/hackbar/?src=search" target="_blank" rel="external">https://addons.mozilla.org/zh-CN/firefox/addon/hackbar/?src=search</a></p>
<hr>

<p>&nbsp;</p>
<p>我觉得在安装了这些插件以后，iceweasel已经可以胜任你Web日常浏览任务了，用不着的插件不要装太多，不然会很卡。当然还有很多优秀的插件，如果你喜欢的我没有列出来，可以留言给我，我将非常感激，也推荐大家去rootoorotor大神的博客，那里有更详细的介绍和描述。</p>
]]></content>
    <summary type="html">
    <![CDATA[超好用的iceweasel插件]]>
    
    </summary>
    
      <category term="Kali" scheme="http://cubernet.cn/blog/tags/Kali/"/>
    
      <category term="Linux" scheme="http://cubernet.cn/blog/tags/Linux/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[100天]]></title>
    <link href="http://cubernet.cn/blog/100days/"/>
    <id>http://cubernet.cn/blog/100days/</id>
    <published>2013-07-17T16:39:16.000Z</published>
    <updated>2015-05-04T14:55:11.000Z</updated>
    <content type="html"><![CDATA[<p>不知不觉肉了个呆的已经100天啦，写个小页面记录一下，送给亲爱的老婆。:)</p>
<a id="more"></a>
<p><a href="http://cubernet.ok8.in/100days/iloveyou.html" target="_blank" rel="external">页面传送门：</a><a href="http://cubernet.ok8.in/100days/iloveyou.html" target="_blank" rel="external">http://cubernet.ok8.in/100days/iloveyou.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[跟老婆在一起的100天纪念日]]>
    
    </summary>
    
      <category term="life" scheme="http://cubernet.cn/blog/tags/life/"/>
    
      <category term="生活归档" scheme="http://cubernet.cn/blog/categories/%E7%94%9F%E6%B4%BB%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[临时邮箱地址获取脚本]]></title>
    <link href="http://cubernet.cn/blog/mail/"/>
    <id>http://cubernet.cn/blog/mail/</id>
    <published>2013-05-22T16:39:16.000Z</published>
    <updated>2015-05-04T14:53:08.000Z</updated>
    <content type="html"><![CDATA[<p>临时邮箱——注册非重要资源专用<br>现在注册各种论坛、网站的时候都要填邮箱地址，注册完之后经常会发现不久之后垃圾邮件就塞满了你的邮箱。如何摆脱垃圾邮件的骚扰？找一个临时邮箱或一次性邮箱不失为一个很不错的方法。</p>
<p>另外，当你需要注册许多马甲账号的时候，还需要马上获取到许多临时邮箱地址，下面这段python脚本帮你实现。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> cookielib</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRandomMail</span><span class="params">()</span>:</span></span><br><span class="line">posturl = <span class="string">"http://mail.bccto.me/renew.php"</span></span><br><span class="line">data = &#123;&#125;</span><br><span class="line">req = urllib2.Request(posturl)</span><br><span class="line">data = urllib.urlencode(data)</span><br><span class="line"><span class="comment">#enable cookie</span></span><br><span class="line">opener = urllib2.build_opener(urllib2.HTTPCookieProcessor())</span><br><span class="line">response = opener.open(req, data)</span><br><span class="line"><span class="keyword">return</span>  json.loads(response.read())[<span class="string">'mail'</span>]</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[临时邮箱地址获取脚本]]>
    
    </summary>
    
      <category term="Python" scheme="http://cubernet.cn/blog/tags/Python/"/>
    
      <category term="技术归档" scheme="http://cubernet.cn/blog/categories/%E6%8A%80%E6%9C%AF%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[你是我最好的遇见]]></title>
    <link href="http://cubernet.cn/blog/bestmeet/"/>
    <id>http://cubernet.cn/blog/bestmeet/</id>
    <published>2013-04-22T16:39:16.000Z</published>
    <updated>2015-05-04T14:52:21.000Z</updated>
    <content type="html"><![CDATA[<p>于千万人中遇见你所要遇见的人，于千万年之中，时间的无涯的荒野里，没有早一步，也没有晚一步，刚巧赶上了，那也没有别的话可说，唯有轻轻问一句：“哦，你也在这里么？”</p>
<p>Among thousands of people, you meet those you’ve met. Through thousands of years, with the boundlessness of time, you happen to meet them, neither earlier nor a bit too late.</p>
<p>张爱玲如是描述遇见。</p>
<a id="more"></a>
<p>在很长一段时间里，我整个人都是迷茫的，因为想不通许多事情的结局为什么会是那样，直到遇见你。 没错，上一次我也同样相信可以走到最后，但，我更相信这一次不同。 如果说恋爱是一门学问，那之前的我一定是个成绩差到不行的小男孩。在无数次的犯错再犯错之后，终于从中学到了些什么，明白了些什么。 种种收获，不如愿意付出来的实在。 付出，是一个从小就被经常提及的事情，不知别人，至少对我来讲，是刚刚学会。 其实很多时候事情不会像我们想象的那么完美，一个人是没可能占据所有美好的东西。你想要得到，你就必须愿意付出，愿意舍弃其他的东西。 我曾经空喊着爱爱爱，却没有付出任何的实际行动，没有勇气放弃任何其他的东西。 陈孝正的青春里是有爱情的，但那爱情是无果的。辛夷坞给出了一个很完美的解释：因为他爱自己，胜过爱爱情。</p>
<p>so，谈一场真正爱爱情的爱情吧。</p>
<p>说到爱情，必然是两个人的事。 如果说口头上的深情款款比不过现实的残酷，那切实的行动一定可以击败掉那些四起的流言。 我向来是个吝啬眼泪吝啬感动的人，但你成功在短短的时间里不止一次的直接戳击到最内心的感动。那种感觉是无法用我苍白的文字来描述的，但我会做给你看，让你明白，我看到了你的付出，我愿更多的付出。</p>
<p>妈妈说，“你要好好对待怡然，不要辜负了她。” 我想，就让我用行动来回答，让时间来见证吧。 You are my best meet.</p>
]]></content>
    <summary type="html">
    <![CDATA[你是我最好的遇见]]>
    
    </summary>
    
      <category term="life" scheme="http://cubernet.cn/blog/tags/life/"/>
    
      <category term="生活归档" scheme="http://cubernet.cn/blog/categories/%E7%94%9F%E6%B4%BB%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
</feed>